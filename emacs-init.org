#+TITLE: Emacs Configuration
#+AUTHOR: Christian E. Hopps
#+EMAIL: chopps@gmail.com
#+STARTUP: indent


* Attributions
This file was developed by first starting with a copy from https://github.com/jhenahan/emacs.d
with help from https://github.com/daschwa/dotfiles/blob/master/emacs.d/emacs-init.org

Got some great ideas about evil mode integration from:
https://github.com/noahfrederick/dots/blob/master/emacs.d/emacs.org

Finally went back over the file using
https://github.com/noahfrederick/dots/blob/master/emacs.d/emacs.org as a guide
switching to req-package everywhere.

Thanks to those folks.

* Configuring and Installing Packages
The very first thing we do is require =req-package= as it will make sure that
packages are properly installed. Additionally we then require pallet so that our
=Cask= file is kept up to date with any installed packages.

#+begin_src emacs-lisp
  ;;--------------------------------------------
  ;; Do not edit this file. It was tangled from
  ;; an org file.
  ;;--------------------------------------------

  ;; (defadvice message (before who-said-that activate)
  ;;  "Find out who said that thing. and say so."
  ;;  (let ((trace nil) (n 1) (frame nil))
  ;;    (while (setq frame (backtrace-frame n))
  ;;        (setq n     (1+ n)
  ;;              trace (cons (cadr frame) trace)) )
  ;;    (ad-set-arg 0 (concat "<<%S>>:\n" (ad-get-arg 0)))
  ;;    (ad-set-args 1 (cons trace (ad-get-args 1))) ))

  (defadvice _message (before test-symbol activate)
    (if (not (string-equal (ad-get-arg 0) "%s%s"))
        (let ((deactivate-mark nil)
              (inhibit-read-only t))
          (save-excursion
            (set-buffer "*Messages*")
            ;;(toggle-read-only (current-buffer))
            (goto-char (point-max))
            (if (not (bolp))
                (newline))
            (insert (current-time-microseconds))
            ;;(toggle-read-only (current-buffer))
            ))))
  ;; Main package that loads (and installs) everything
  (setq req-package-log-level 'trace)
  ;; use req-package--log-open-... to view the log
  (require 'req-package)

  ;; Pallet must be first so other auto-installed dependencies update Cask file.
  (req-package pallet
    :commands pallet-mode)
  (pallet-mode t)
#+end_src

* Initialization
** Required Initialization
*** Use Unicode
#+begin_src emacs-lisp
  (setq debug-init-msg t)

  (setenv "LC_CTYPE" "UTF-8")
#+end_src

*** Benchmarking
It’s useful to measure how long it takes Emacs to start up, so let’s show the
total time in a message:

#+begin_src emacs-lisp
  (defun nox/show-startup-time ()
    "Show Emacs's startup time in the minibuffer"
    (message "Startup time: %s seconds."
             (emacs-uptime "%s")))

  (add-hook 'emacs-startup-hook 'nox/show-startup-time 'append)
#+end_src

Benchmark-init.el can give us a breakdown of time spent on require and load
calls:

#+begin_src emacs-lisp
  (require 'benchmark-init)
  (add-hook 'after-init-hook 'benchmark-init/deactivate)
#+end_src

*** No Frills
#+begin_src emacs-lisp
  (dolist (mode '(global-linum-mode highlight-indentation-mode menu-bar-mode tool-bar-mode scroll-bar-mode))
    (when (fboundp mode) (funcall mode -1)))
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Enable Basic Features
**** Default Mode
#+begin_src emacs-lisp
  (setq default-major-mode 'text-mode)
#+end_src

**** Enable Basic Functionality
***** Enable setting a goal column with C-x C-n
#+begin_src emacs-lisp
  (put 'set-goal-column 'disabled nil)
#+end_src

***** Enable evaluating an expression in the minibuffer
#+begin_src emacs-lisp
  ;; Enable evaulation of expressions
  (put 'eval-expression 'disabled nil)
#+end_src

***** Enable leftwise scrolling
#+begin_src emacs-lisp
  ;; Enable leftward scrolling.
  (put 'scroll-left 'disabled nil)
#+end_src
*** Paths
**** Load path
#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "local-lisp"))
  (add-to-list 'load-path (concat user-emacs-directory "my-themes/emacs-color-theme-solarized"))
  (add-to-list 'load-path (concat user-emacs-directory "my-themes/emacs-easter-theme"))
  (add-to-list 'load-path (concat user-emacs-directory "flymake-pyfixers"))
  ;; (if (file-exists-p "~/p/lisp/org-cdets") (add-to-list 'load-path "~/p/lisp/org-cdets"))

  ;; Our custom org2blog, should make this a custom el-get?
  (if (file-exists-p "~/Documents/Projects-Local/org2blog")
      (add-to-list 'load-path "~/Documents/Projects-Local/org2blog"))
#+end_src

**** Search path
#+begin_src emacs-lisp
  (req-package-force exec-path-from-shell
    :if (eq system-type 'darwin)
    :config
    (progn
      ;; Derive PATH by running a shell so that GUI Emacs
      ;; sessions have access to it
      ;; We do not actually want a login shell
      (setq exec-path-from-shell-arguments '("-i"))
      (exec-path-from-shell-copy-envs '("HOSTNAME" "PATH" "PYTHONPATH"))
      (exec-path-from-shell-initialize)))
#+end_src

*** Temporary Files
Auto save and backup files go in /tmp.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
#+end_src

*** Ctrl-Key and Shift-Key TTY Escape Mappings
These require modifications in iterm to map the appropriate keys to the
sequence. This is a way to pass keys that normally don't translate through a
tty to do so. In order to implement this one needs to map the given key to an
escape sequence as given below.

#+begin_src emacs-lisp
  (defun chopps-add-local-keys (&optional frame)
    (let ((keymap function-key-map))    ; was local-function-key-map
      (message "adding keys")
      (define-key keymap (kbd "ESC \" 2 A") '[S-up])
      (define-key keymap (kbd "ESC \" 2 B") '[S-down])
      (define-key keymap (kbd "ESC \" 2 C") '[S-right])
      (define-key keymap (kbd "ESC \" 2 D") '[S-left])

      (define-key keymap (kbd "ESC \" 5 A") '[C-up])
      (define-key keymap (kbd "ESC \" 5 B") '[C-down])
      (define-key keymap (kbd "ESC \" 5 C") '[C-right])
      (define-key keymap (kbd "ESC \" 5 D") '[C-left])

      (define-key keymap (kbd "ESC \" 2 R") '[S-return])
      (define-key keymap (kbd "ESC \" 5 R") '[C-return])
      (define-key keymap (kbd "ESC \" 5 ;") '[?\C-\;])
      (define-key keymap (kbd "ESC \" 5 :") '[?\C-\:])
      (define-key keymap (kbd "ESC \" 5 ,") '[?\C-\,])
      (define-key keymap (kbd "ESC \" 3 .") '[?\C-\.])
      (define-key keymap (kbd "ESC \" 5 >") '[?\C-\>])
      (define-key keymap (kbd "ESC \" 5 <") '[?\C-\<])
      (define-key keymap (kbd "ESC \" 5 /") '[?\C-\/])
      (define-key keymap (kbd "ESC \" 5 ?") '[?\C-\?])
      (define-key keymap (kbd "ESC \" 5 \'") '[?\C-\'])
      (define-key keymap (kbd "ESC \" 5 \"") '[?\C-\"])

      (define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)))
    (chopps-add-local-keys)
  ;; (add-hook 'after-make-frame-functions 'chopps-add-local-keys)
#+end_src

*** Load Customizations
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
#+end_src

*** Platform (Mac) Specific
For now this is specific to Mac OS X.

#+begin_src emacs-lisp
  (cond ((eq system-type 'darwin)
         ;; BSD ls does not support --dired. Use GNU core-utils:
         ;; brew install coreutils
         (when (executable-find "gls")
           (setq insert-directory-program "gls"))

         ;; Move to homedir from if in root.
         (if (string= default-directory "/")
             (cd "~"))

         ;; Point Org to LibreOffice executable
         (when (file-exists-p "/Applications/LibreOffice.app/Contents/MacOS/soffice")
           (setq org-export-odt-convert-processes
                 '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))))
#+end_src
** Very Important Initialization
*** El-Get
#+begin_src emacs-lisp :tangle yes
  (setq el-get-verbose t)
  (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))

  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (setq el-get-github-default-url-type "https")
  ;(setq el-get-user-package-directory (concat user-emacs-directory "el-get-init-files/"))
  ;(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")

  ;; (setq old-get-private 'el-get-github-url-private)
  ;; (defun el-get-github-url-private (url-type username reponame)
  ;;  (let* ((init-string (funcall old-get-private url-type username reponame))
  ;;       (new-string (el-get-replace-string "http:" "https:" init-string)))
  ;;    (message "%s %s" init-string new-string)))

  (setq my-el-get-packages
        (append '(pylookup
                  ;; pymacs
                  ;; XXx xml-rpc-el
                  )))

  (el-get 'sync my-el-get-packages)

  (defun el-get-sync-recipes (overlay)
    (let* ((recipe-glob (locate-user-emacs-file (concat overlay "/recipes/*.rcp")))
           (recipe-files (file-expand-wildcards recipe-glob))
           (recipes (mapcar 'el-get-read-recipe-file recipe-files)))
      (mapcar (lambda (r) (add-to-list 'el-get-sources r)) recipes)
      (el-get 'sync (mapcar 'el-get-source-name recipes))))

    ;; EL-GET SYNC OVERLAYS
  (el-get-sync-recipes "el-get-haskell")
  (el-get-sync-recipes "el-get-user")

#+end_src

*** Recompile Local Lisp
#+begin_src emacs-lisp :tangle yes
  (byte-recompile-directory (expand-file-name "~/.emacs.d/local-lisp") 0)
  (if (file-exists-p (expand-file-name "~/.emacs.d/my-themes/emacs-color-theme-solarized"))
      (byte-recompile-directory (expand-file-name "~/.emacs.d/my-themes/emacs-color-theme-solarized") 0))
  ;; (if (file-exists-p (expand-file-name "~/p/lisp/org-cdets"))
  ;;     (byte-recompile-directory (expand-file-name "~/p/lisp/org-cdets") 0))
#+end_src

*** Uniquify
#+begin_src emacs-lisp :tangle yes
  (req-package uniquify
    :init
    (progn
      (setq uniquify-buffer-name-style 'forward)))
#+end_src
*** Frames
#+begin_src emacs-lisp :tangle yes
  (if (not (window-system))
      (setq initial-frame-alist '((top . -420) (left . 4800) (width . 233) (height . 90)))
    )
  ;; (setq initial-frame-alist '((top . 200) (left . 100) (width . 147) (height . 98)))
  ;; (setq initial-frame-alist '((top + -47) (left + -908) (width . 124) (height . 85)))
#+end_src
*** Evil
#+begin_src emacs-lisp :tangle yes
  (req-package-force evil
    ;;:require (evil-args evil-nerd-commenter evil-terminal-cursor-changer)
    ;;:require (evil-args evil-nerd-commenter)
    :require (evil-matchit)
    :init
    (progn
      (setq evil-search-wrap nil)
      (setq evil-want-C-i-jump nil)

      ;; (setq evil-esc-delay 0)
      (setq evil-esc-delay 0.001)


      ;; (setq evil-default-cursor t)
      ;; (setq evil-emacs-state-cursor  '("red" box))
      ;; (setq evil-normal-state-cursor '("gray" box))
      ;; (setq evil-visual-state-cursor '("gray" box))
      ;; (setq evil-insert-state-cursor '("gray" bar))
      ;; (setq evil-motion-state-cursor '("gray" box))

      (setq evil-emacs-state-cursor 'hbar)
      (setq evil-normal-state-cursor 'box)
      (setq evil-visual-state-cursor 'box)
      (setq evil-insert-state-cursor 'bar)
      (setq evil-motion-state-cursor nil)

      (defun evil-undefine ()
        (interactive)
        (let (evil-mode-map-alist)
          (call-interactively (key-binding (this-command-keys)))))
      )
    :config
    (progn
      (evil-change-to-initial-state)
      (add-to-list 'evil-emacs-state-modes
                   'artist-mode)

      (require 'evil-args)
      ;; (require 'evil-nerd-commenter)
      (require 'evil-terminal-cursor-changer)

      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key evil-normal-state-map (kbd "TAB") 'evil-undefine)
      ;; (define-key evil-normal-state-map (kbd "RET") 'evil-undefine)
      ;; (define-key evil-normal-state-map " " 'evil-undefine)

      ;; Undefine vi keys in all modes.
      (let ((undef '("\C-a" "\C-e" "\C-n" "\C-p")))
        (while undef
          (define-key evil-normal-state-map (car undef) 'evil-undefine)
          (define-key evil-visual-state-map (car undef) 'evil-undefine)
          (define-key evil-insert-state-map (car undef) 'evil-undefine)
          (setq undef (cdr undef))))

      ;; Undefine vi keys in insert mode.
      (let ((undef '("\C-k")))
        (while undef
          (define-key evil-insert-state-map (car undef) 'evil-undefine)
          (setq undef (cdr undef))))

      ;; Remove RET and SPC from motion map so they can be overridden by various modes
      (defun my-move-key (keymap-from keymap-to key)
        "Moves key binding from one keymap to another, deleting from the old location. "
        (define-key keymap-to key (lookup-key keymap-from key))
        (define-key keymap-from key nil))
      (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
      (my-move-key evil-motion-state-map evil-normal-state-map " ")

      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

      ;; Configure some modes to start in emacs mode.
      (dolist (mode '(gud-minor-mode
                      gud-mode
                      gud))
        (evil-set-initial-state mode 'emacs))

      ))
  (evil-mode 1)
  (global-evil-matchit-mode)

#+end_src

** Standard Initialization
*** Start Emacs Server
The emacs server allows for using =emacsclient= to access the running emacs
without relaunching.

#+begin_src emacs-lisp :tangle yes
  (req-package-force server
    :config
    (progn
      (if debug-init-msg
          (message "Mark pre server config"))
      (unless (server-running-p)
        (server-start))
      (if debug-init-msg
          (message "Mark post server config"))
      )
    )
#+end_src

*** Cleanup Minor Modes in Modeline
#+BEGIN_SRC emacs-lisp
  (defvar mode-line-cleaner-alist
    `((abbrev-mode . " Ab")
      (auto-complete-mode . " AC")
      (auto-fill-mode . "")
      ;; Buffer face mode causes certain modes to use variable width font.
      ;; (buffer-face-mode . "")
      (filladapt-mode . "")
      (flyspell-mode . "")
      (magit-auto-revert-mode . "")
      (org-indent-mode "OI")
      (rebox-mode . " Rbx")
      (undo-tree-mode . "")
      ;; (yas/minor-mode . " u")
      ;; Major modes have no space in front
      (lisp-interaction-mode . "λ")
      (org-mode . "O")
      (python-mode . "Py")
      (emacs-lisp-mode . "EL")
      ))

  (defun clean-mode-line ()
    (interactive)
    (loop for cleaner in mode-line-cleaner-alist
          do (let* ((mode (car cleaner))
                   (mode-str (cdr cleaner))
                   (old-mode-str (cdr (assq mode minor-mode-alist))))
               (when old-mode-str
                   (setcar old-mode-str mode-str))
                 ;; major mode
               (when (eq mode major-mode)
                 (setq mode-name mode-str)))))

  (add-hook 'after-change-major-mode-hook 'clean-mode-line)
#+END_SRC

*** Visuals
**** Rainbow Modes (highlight using colors)
#+begin_src emacs-lisp :tangle yes
  (req-package rainbow-mode
    :commands rainbow-mode)
  (req-package rainbow-delimiters
    :commands rainbow-delimiters-mode rainbow-delimiters-mode-enable rainbow-delimiters-mode-disable)
#+end_src
**** Themes
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "my-themes/"))
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "my-themes/emacs-color-theme-solarized"))
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "my-themes/emacs-easter-theme"))

  (setq current-theme nil)

  ;; (req-package-force solarized-theme)
  ;; (req-package-force zenburn-theme)

  (defun get-detroit-hour ()
    (string-to-number (shell-command-to-string "TZ=America/Detroit date +%k")))

  (defun get-local-hour ()
    (string-to-number (shell-command-to-string "date +%k")))

  (defun synchronize-theme  ()
    (interactive)
    (if (not (member (get-local-hour) (number-sequence 7 17)))
                (setq now 'solarized-dark)
              (setq now 'solarized-dark))
    (if (not (eq now current-theme))
        (progn
          (load-theme now)
          (setq current-theme now))))


  ;; (synchronize-theme)
  ;; (run-with-timer 0 600 'synchronize-theme)


  (setq current-graphic-theme 'easter)
  (setq current-tty-theme 'easter)

  (defun new-frame-pick-theme (frame)
    (select-frame frame)
    (if (window-system frame)
        (load-theme current-graphic-theme t)
      (load-theme current-tty-theme t)))

  (if (daemonp)
      (add-hook 'after-make-frame-functions 'new-frame-pick-theme)
    (load-theme current-tty-theme))

  ;; (require 'centered-window-mode)
  ;; (centered-window-mode t)

  ;; (setq sml/theme 'respectful)
  ;; (sml/setup)

  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┇))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┃))
  (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?|))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?╏))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┆))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┊))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┋))

#+end_src

*** Mail
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package bbdb
    :commands (bbdb-initialize bbdb-complete-mail)
    :init
    (progn 
      (if debug-init-msg
          (message "Mark pre bbdb init"))
      (setq bbdb-file "~/.emacs.d/bbdb"))
    :config
    (progn
      (if debug-init-msg
          (message "Mark pre bbdb config"))
      (setq
       bbdb-offer-save 1                        ;; 1 means save-without-asking


       bbdb-use-pop-up t                        ;; allow popups for addresses
       bbdb-electric-p t                        ;; be disposable with SPC
       bbdb-popup-target-lines  1               ;; very small

       bbdb-dwim-net-address-allow-redundancy t ;; always use full name
       bbdb-quiet-about-name-mismatches 2       ;; show name-mismatches 2 secs

       bbdb-always-add-address t                ;; add new addresses to existing...
                                                ;; ...contacts automatically
       bbdb-canonicalize-redundant-nets-p t     ;; x@foo.bar.cx => x@bar.cx

       bbdb-completion-type nil                 ;; complete on anything

       bbdb-complete-name-allow-cycling t       ;; cycle through matches
                                               ;; this only works partially

       bbbd-message-caching-enabled t           ;; be fast
       bbdb-use-alternate-names t               ;; use AKA


       bbdb-elided-display t                    ;; single-line addresses

       ;; auto-create addresses from mail
       bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook
       bbdb-ignore-some-messages-alist ;; don't ask about fake addresses
       ;; NOTE: there can be only one entry per header (such as To, From)
       ;; http://flex.ee.uec.ac.jp/texi/bbdb/bbdb_11.html

       '(( "From" . "no.?reply\\|DAEMON\\|daemon\\|facebookmail\\|twitter"))
       )
      (if debug-init-msg
          (message "Mark post bbdb config"))
      )
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (req-package wl-user-agent-compose)
  ;; (req-package wl-other-frame)
  ;; (req-package wl-draft)
  ;; (autoload 'wl-other-frame "wl" "Wanderlust on new frame." t)
  ;; (autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
  ;; (autoload 'wl-user-agent-compose "wl-draft" nil t)


  (req-package bbdbV3-wl
    :require (mime-view bbdb)
    :commands bbdbV3-wl
   )

  (req-package wl-draft
    :commands (wl-draft-send wl-draft-kill))

  (req-package wl
    :require bbdbV3-wl
    :commands (wl wl-other-frame wl-draft wl-user-agent-compose)
    :init
    (progn
      (if debug-init-msg
          (message "Mark pre wl init"))
      (setq
       elmo-maildir-folder-path  "~/Maildir/chopps.org"
       wl-maildir-folder-path  "~/Maildir/chopps.org"

       wl-stay-folder-window t
       wl-folder-window-width 30

       wl-from "Christian Hopps <chopps@chopps.org>"

       wl-fcc ".Sent Messages"
       wl-fcc-force-as-read t

       ;; Maildirs
       wl-default-folder ".INBOX"
       wl-draft-folder ".Drafts"
       wl-spam-folder ".Spam"
       wl-trash-folder ".Trash"
       wl-queue-folder ".Queue" ;; not needed?

       ;; SMTP
       wl-draft-send-mail-function 'smtpmail-send-it
       ;; wl-local-domain "chopps.org"
       ;; wl-message-id-domain "chopps.org"
       ;; wl-smtp-connection-type 'starttls
       ;; wl-smtp-posting-port 9005
       ;; wl-smtp-authenticate-type "login"
       ;; wl-smtp-posting-user "chopps"
       ;; wl-smtp-posting-server "smtp.chopps.org"

       ;; check this folder periodically, and update modeline
       wl-biff-check-folder-list '(".todo") ;; check every 180 seconds
       ;; (default: wl-biff-check-interval)

       ;; hide many fields from message buffers
       wl-message-ignored-field-list '("^.*:")
       wl-message-visible-field-list '("^\\(To\\|Cc\\):"
                                       "^Subject:"
                                       "^\\(From\\|Reply-To\\):"
                                       "^Organization:"
                                       "^Message-Id:"
                                       "^\\(Posted\\|Date\\):")
       wl-message-sort-field-list '("^From"
                                    "^Organization:"
                                    "^X-Attribution:"
                                    "^Subject"
                                    "^Date"
                                    "^To"
                                    "^Cc")
       wl-folder-check-async t

        ;; elmo-imap4-default-server "imap.gmail.com"
        ;; elmo-imap4-default-user "chopps@gmail.com"
        ;; elmo-imap4-default-authenticate-type 'clear
        ;; elmo-imap4-default-port 993
        ;; elmo-imap4-default-stream-type 'ssl
        ;; elmo-imap4-use-modified-utf7 t

        ;; wl-smtp-connection-type 'starttls
        ;; wl-smtp-posting-port 587
        ;; wl-smtp-authenticate-type "plain"
        ;; wl-smtp-posting-user "chopps"
        ;; wl-smtp-posting-server "smtp.gmail.com"
        ;; wl-local-domain "gmail.com"

        ;; wl-default-folder "%inbox"
        ;; wl-default-spec "%"
        ;; wl-draft-folder "%[Gmail]/Drafts"
        ;; wl-trash-folder "%[Gmail]/Trash"
        )

        (if (boundp 'mail-user-agent)
          (setq mail-user-agent 'wl-user-agent))

        (if (fboundp 'define-mail-user-agent)
          (define-mail-user-agent
            'wl-user-agent
            'wl-user-agent-compose
            'wl-draft-send
            'wl-draft-kill
            'mail-send-hook))
        (if debug-init-msg
            (message "Mark post wl init"))
        )
    :config
    (progn
        (if debug-init-msg
            (message "Mark pre wl config"))
      (require 'wl-draft)
      ;; (bbdb-wl-setup)
      ;; (setq bbdb-wl-folder-regexp "INBOX\\|Sent")
      (evil-set-initial-state 'wl-folder-mode 'emacs)
      (evil-set-initial-state 'wl-summary-mode 'emacs)
      (evil-set-initial-state 'mime-view-mode 'emacs)

      ;; do we need this to get the map?
      (define-key wl-draft-mode-map (kbd "<C-tab>") 'bbdb-complete-name)
      (if debug-init-msg
          (message "Mark post wl config"))
      )
    )

#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Generic Mail variables
  (setq
   message-send-mail-function 'smtpmail-send-it
   send-mail-function 'smtpmail-send-it

   smtpmail-default-smtp-server "smtp.chopps.org"
   smtpmail-local-domain "chopps.org"
   smtpmail-sendto-domain "chopps.org"
   smtpmail-debug-info t
   smtpmail-starttls-credentials '(("smtp.chopps.org" 9005 nil nil))
   smtpmail-auth-credentials "~/.authinfo.gpg" ;; '(("smtp.chopps.org" 9005 "chopps@chopps.org" nil))
   smtpmail-smtp-service 9005

   user-mail-address  "chopps@chopps.org"
   user-full-name     "Christian Hopps"
   )
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle no
  (req-package mu4e-maildirs-extension
    :init
    (progn
      (defun my/mu4e-maildirs-extension-propertize-unread-only (item)
        "Propertize only the maildir unread count using ITEM plist."
        (format "%s\t%s%s %s (%s/%s)\n"
                (if (equal (plist-get item :level) 0) "\n" "")
                (plist-get item :indent)
                (plist-get item :separator)
                (plist-get item :name)
                (propertize (number-to-string (plist-get item :unread))
                            'face (cond
                                   ((> (plist-get item :unread) 0) 'mu4e-maildirs-extension-maildir-unread-face)
                                   (t            'mu4e-maildirs-extension-maildir-face)))
                (plist-get item :total)))
      )
      ;; (setq mu4e-maildirs-extension-propertize-func 'my/mu4e-maildirs-extension-propertize-unread-only)
    )
  (req-package mu4e
    :require (smtpmail mu4e-maildirs-extension)
    :init
    (progn
      (setq
       mu4e-maildir "~/Maildir"
       mu4e-maildir-shortcuts '(("/chopps.org/INBOX" . ?k))
       mu4e-attachment-dir "~/Downloads"

       mu4e-sent-folder   "/chopps.org/Sent Messages"
       mu4e-drafts-folder "/chopps.org/Drafts")

      (defvar my-mu4e-account-alist
        '(
          ("chopps.org"
           ;; about me
           (user-mail-address      "chopps@chopps.org")
           ;; mu4e
           (mu4e-sent-folder   "/chopps.org/Sent Messages")
           (mu4e-trash-folder   "/chopps.org/Trash")
           (mu4e-drafts-folder "/chopps.org/Drafts")
           (mu4e-sent-messages-behavior 'sent)

           (mu4e-maildir-shortcuts '( ("/chopps.org/INBOX" . ?i)
                                      ("/chopps.org/Sent Messages" . ?s)
                                     ))
           ;; smtp
           (smtpmail-starttls-credentials '(("smtp.chopps.org" 9005 nil nil)))
           (smtpmail-auth-credentials "~.authinfo.gpg")
           (smtpmail-default-smtp-server "smtp.chopps.org")
           (smtpmail-smtp-server "smtp.chopps.org")
           (smtpmail-smtp-service 9005))
          ("gmail.com"
           ;; about me
           (user-mail-address      "chopps@gmail.com")
           ;; mu4e
           (mu4e-sent-folder   "/gmail.com/[Gmail].Sent Mail")
           (mu4e-drafts-folder "/gmail.com/[Gmail].Drafts")
           (mu4e-trash-folder   "/gmail.com/[Gmail].Trash")
           (mu4e-sent-messages-behavior 'delete)

           (mu4e-maildir-shortcuts '( ("/gmail.com/INBOX" . ?i)
                                      ("/gmail.com/[Gmail].Sent Mail" . ?s)
                                      ("/gmail.com/[Gmail].Trash" . ?t)
                                     ))
           ;; smtp
           (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
           (smtpmail-default-smtp-server "smtp.gmail.com")
           (smtpmail-smtp-server "smtp.gmail.com")
           (smtpmail-smtp-service 587))
          )
        )
      (defun my-mu4e-set-account ()
        "Set the account for composing a message."
        (let* ((account
                (if mu4e-compose-parent-message
                    (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                      (string-match "/\\(.*?\\)/" maildir)
                      (match-string 1 maildir))
                  (completing-read (format "Compose with account: (%s) "
                                           (mapconcat #'(lambda (var) (car var))
                                                      my-mu4e-account-alist "/"))
                                   (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                   nil t nil nil (caar my-mu4e-account-alist))))
               (account-vars (cdr (assoc account my-mu4e-account-alist))))
          (if account-vars
              (mapc #'(lambda (var)
                        (set (car var) (cadr var)))
                    account-vars)
            (error "No email account found"))))
      )
    :config
    (progn
      (mu4e-maildirs-extension)
      (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
      )
    )

#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package gnus
    :require bbdb
    :commands gnus
    :init
    (progn
      (if debug-init-msg
          (message "Mark pre gnus init"))
      (setq
       mail-sources nil
       gnus-fetch-old-headers t
       gnus-message-archive-group "Sent Messages"
       gnus-select-method '(nnmaildir "Home"
                                      (directory "~/Maildir/chopps.org/")
                                      (directory-files nnheader-directory-files-safe)
                                      (get-new-mail nil)))
      (if debug-init-msg
          (message "Mark post gnus init"))
      )
    :config
    (progn
      (if debug-init-msg
          (message "Mark pre gnus config"))
      (bbdb-initialize 'gnus)
      (gnus-demon-add-handler 'gnus-demon-scan-news 2 t)
      (setq gnus-message-archive-method gnus-select-method)
      (if debug-init-msg
          (message "Mark post gnus config"))
      ))


#+END_SRC

*** VCS
#+begin_src emacs-lisp :tangle yes
  (req-package magit
    :commands magit-status
    :bind ("C-c g" . magit-status)
    :init
    (progn
      (setq magit-last-seen-setup-instructions "1.4.0")))

  (req-package gist
    :commands gist-list)

  (autoload 'svn-status "dsvn" "Run `svn status'." t)
  (autoload 'svn-update "dsvn" "Run `svn update'." t)
  ;; (req-package vc-svn)

#+end_src
*** Encryption
#+begin_src emacs-lisp :tangle yes
  (req-package epa-file
    :commands (epa-file epa-file-enable)
    :init
    (progn
      (setq epg-debug t)
      ;; (setq epg-key-id "D7B83025")
      (setq epg-user-id "D7B83025")
      (setq epg-user-id-alist '(("chopps@gmail.com" . "D7B83025")
                                ("chopps@chopps.org" . "D7B83025")
                                ("chopps" . "D7B83025")))
      (setq epg-gpg-program (executable-find "gpg"))
      ))
#+end_src
*** Text Mode
#+begin_src emacs-lisp :tangle yes
  (defun my-text-mode-hook ()
    "Custom text mode hook"
    (turn-on-auto-fill)
    (turn-on-flyspell)
    ;; (variable-pitch-mode 1)
    )
  (add-hook 'text-mode-hook 'my-text-mode-hook)
  (add-hook 'rst-mode-hook (lambda ()
                             (define-key mode-specific-map "0" 'rst-adjust)
                             (setq fill-column 79)
                             ))
  (setq default-fill-column 80)

  (add-to-list 'auto-mode-alist '("diff" . diff-mode))
  (add-to-list 'auto-mode-alist '("\\.diff\\'" . diff-mode))

  (eval-after-load "text-mode"
    '(progn
       (modify-syntax-entry ?_ "w" text-mode-syntax-table)
       (modify-syntax-entry ?- "w" text-mode-syntax-table)
       ))
#+end_src

*** Buffer Handling
#+begin_src emacs-lisp :tangle yes
  ;; (iswitchb-mode 1)
  ;; (setq iswitchb-buffer-ignore '("^ " "^\\*"))
  (setq iswitchb-buffer-ignore '("^ "))
  (setq-default save-place t)

  (defun dont-kill-but-bury-scratch ()
    "Don't kill but burry *scratch* buffer."
    (if (equal (buffer-name (current-buffer)) "*scratch*")
        (progn (bury-buffer) nil)
      t))
  (add-hook 'kill-buffer-query-functions 'dont-kill-but-bury-scratch)
#+end_src

*** Cleanup Buffers Automatically
#+begin_src emacs-lisp :tangle yes
  (require 'midnight)


  ;; Redefine this function so that we can take into account buffers that have clients
  (defun clean-buffer-list ()
      "Kill old buffers that have not been displayed recently.
  The relevant variables are `clean-buffer-list-delay-general',
  `clean-buffer-list-delay-special', `clean-buffer-list-kill-buffer-names',
  `clean-buffer-list-kill-never-buffer-names',
  `clean-buffer-list-kill-regexps' and
  `clean-buffer-list-kill-never-regexps'.
  While processing buffers, this procedure displays messages containing
  the current date/time, buffer name, how many seconds ago it was
  displayed (can be nil if the buffer was never displayed) and its
  lifetime, i.e., its \"age\" when it will be purged."
      (interactive)
      (let ((tm (float-time)) bts (ts (format-time-string "%Y-%m-%d %T"))
            delay cbld bn)
        (dolist (buf (buffer-list))
          (when (buffer-live-p buf)
            (setq bts (midnight-buffer-display-time buf) bn (buffer-name buf)
                  delay (if bts (- tm bts) 0) cbld (clean-buffer-list-delay bn))
            (message "[%s] `%s' [%s %d]" ts bn (if bts (round delay)) (- cbld delay))
            (unless (or (buffer-local-value 'server-buffer-clients buf)
                        (midnight-find bn clean-buffer-list-kill-never-regexps
                                       'string-match)
                        (midnight-find bn clean-buffer-list-kill-never-buffer-names
                                       'string-equal)
                        (get-buffer-process buf)
                        (and (buffer-file-name buf) (buffer-modified-p buf))
                        (get-buffer-window buf 'visible)
                        (< delay cbld)
                        )
              (message "[%s] killing `%s'" ts bn)
              (kill-buffer buf))))))

  ;;kill buffers if they were last disabled more than this seconds ago (30m)
  (setq clean-buffer-list-delay-special 1800)

  (defvar clean-buffer-list-timer nil
    "Stores clean-buffer-list timer if there is one. You can disable clean-buffer-list by (cancel-timer clean-buffer-list-timer).")
  ;; run clean-buffer-list every 2 hours
  (setq clean-buffer-list-timer (run-at-time t 7200 'clean-buffer-list))

  ;; kill everything, clean-buffer-list is very intelligent at not killing unsaved buffer.
  (setq clean-buffer-list-kill-regexps '("^.*$"))

  ;; keep these buffer untouched
  ;; prevent append multiple times
  (defvar clean-buffer-list-kill-never-buffer-names-init
    clean-buffer-list-kill-never-buffer-names
    "Init value for clean-buffer-list-kill-never-buffer-names")

  (setq clean-buffer-list-kill-never-buffer-names
        (append
         '("*Messages*" "*cmd*" "*scratch*" "*w3m*" "*w3m-cache*" "*Inferior Octave*" "status.org" "notes.org")
         clean-buffer-list-kill-never-buffer-names-init))

  ;; prevent append multiple times
  (defvar clean-buffer-list-kill-never-regexps-init
    clean-buffer-list-kill-never-regexps
    "Init value for clean-buffer-list-kill-never-regexps")

  ;; append to *-init instead of itself
  (setq clean-buffer-list-kill-never-regexps
        (append '("^\\*EMMS Playlist\\*.*$")
                clean-buffer-list-kill-never-regexps-init))
#+end_src

*** Windows
#+begin_src emacs-lisp :tangle yes
  (setq wg-morph-on nil)
  (setq wg-prefix-key (kbd "C-c w"))
  ;; (require 'workgroups)
  ;; (workgroups-mode 1)
  ;; (if (file-exists-p "~/.emacs-workgroups")
  ;;     (wg-load "~/.emacs-workgroups"))

  (defun other-window-or-frame ()
    (interactive)
    (other-window 1 'visible)
    (select-frame-set-input-focus (window-frame (selected-window))))


  (defun split-window-sensibly-prefer-horizontal (&optional window)
  "Same as `split-window-sensibly' except prefer to split horizontally first."
    (let ((window (or window (selected-window))))
      (or (and (window-splittable-p window t)
               ;; Split window horizontally.
               (with-selected-window window
                 (split-window-right)))
          (and (window-splittable-p window)
               ;; Split window vertically.
               (with-selected-window window
                 (split-window-below)))
          (and (eq window (frame-root-window (window-frame window)))
               (not (window-minibuffer-p window))
               ;; If WINDOW is the only window on its frame and is not the
               ;; minibuffer window, try to split it vertically disregarding
               ;; the value of `split-height-threshold'.
               (let ((split-height-threshold 0))
                 (when (window-splittable-p window)
                   (with-selected-window window
                     (split-window-below))))))))

  (setq split-width-threshold 100)
  (setq window-min-width 80)
  (setq split-window-preferred-function 'split-window-sensibly-prefer-horizontal)

  (req-package transpose-frame
    :bind ("C-x 4 F" . flop-frame))
  ;; (define-key global-map (kbd "C-x 4 F") 'flop-frame)

#+end_src

*** Shell Mode
#+begin_src emacs-lisp :tangle yes
  (add-hook 'shell-mode-hook
            (function (lambda ()
                        (flyspell-prog-mode)
                        (local-set-key "\M-p" 'comint-previous-input)
                        (local-set-key "\M-n" 'comint-next-input))))


  ;; (require 'shell-switcher)
  ;; (shell-switcher-mode t)
#+end_src
*** Mac
#+begin_src emacs-lisp :tangle yes
  (unwind-protect
   (condition-case ex
        (pc-selection-mode)
    (`error
      t)))
  (global-set-key [?\A-x] 'clipboard-kill-region)
  (global-set-key [?\A-c] 'clipboard-kill-ring-save)
  (global-set-key [?\A-v] 'clipboard-yank)
#+end_src
*** Comint
#+begin_src emacs-lisp :tangle yes
  (eval-after-load "comint"
    '(progn
       (define-key comint-mode-map [(meta p)]
         'comint-previous-matching-input-from-input)
       (define-key comint-mode-map [(meta n)]
         'comint-next-matching-input-from-input)
       (define-key comint-mode-map [(control meta n)]
         'comint-next-input)
       (define-key comint-mode-map [(control meta p)]
         'comint-previous-input)
       (setq comint-completion-autolist t ;list possibilities on partial
                                          ;completion
         comint-completion-recexact nil   ;use shortest compl. if
                                          ;characters cannot be added
         ;; how many history items are stored in comint-buffers (e.g. py- shell)
         ;; use the HISTSIZE environment variable that shells use (if avail.)
         ;; (default is 32)
         comint-input-ring-size (string-to-number (or (getenv "HISTSIZE") "100")))))
#+end_src
*** Generic Lisp
#+begin_src emacs-lisp :tangle yes
  (require 's)

  (defun my-adjoin-to-list-or-symbol (element list-or-symbol)
    (let ((list (if (not (listp list-or-symbol))
                    (list list-or-symbol)
                  list-or-symbol)))
      (require 'cl-lib)
      (cl-adjoin element list)))

  (defun remove-last-elt (list)
    (let ((rlist (reverse list)))
      (reverse (cdr rlist))))

  (defun trim-string (string)
    "Remove white spaces in beginning and ending of STRING.
  White space here is any of: space, tab, emacs newline (line feed, ASCII 10)."
    (replace-regexp-in-string "\\`[ \t\n]*" "" (replace-regexp-in-string "[ \t\n]*\\'" "" string)))

  ;;-------------------------------
  ;; Disabled commands (not many)
  ;;-------------------------------

  (defun enable-all-commands ()
    "Enable all commands, reporting on which were disabled."
    (interactive)
    (with-output-to-temp-buffer "*Commands that were disabled*"
      (mapatoms
       (function
        (lambda (symbol)
          (when (get symbol 'disabled)
            (put symbol 'disabled nil)
            (prin1 symbol)
            (princ "\n")))))))

  (defun increment-numbers-in-rergion ()
    "Find all numbers in the region and increment them by 1."
    (interactive)
    (if (not (use-region-p))
        (error "No region defined"))
    (let* ((start (region-beginning))
           (end (region-end))
           found)
      (save-excursion
        (goto-char start)
        (while (setq found (re-search-forward "[0-9]+" end t))
          (replace-match (number-to-string (+ (string-to-number (match-string 0)) 1)))))))

  (defun normalize-numbers-in-rergion ()
    "Find all numbers in the region starting with 0 set them increasing order"
    (interactive)
    (if (not (use-region-p))
        (error "No region defined"))
    (let* ((start (region-beginning))
           (end (region-end))
           (value 0)
           found)
      (save-excursion
        (goto-char start)
        (while (setq found (re-search-forward "\\<[0-9]+\\>" end t))
          (replace-match (number-to-string value))
          (setq value (+ value 1))))))


  ;; Automatically enable any disabled command the first time it's used.
  (defun enable-this-command (&rest args)
    (put this-command 'disabled nil)
    (call-interactively this-command))
  (setq disabled-command-function 'enable-this-command)

  (defun strip-trailing-whitespace ()
    "Eliminate whitespace at ends of lines."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "[ \t][ \t]*$" nil t)
        (delete-region (match-beginning 0) (point)))))

  ;; (defun nuke-nroff-bs ()
  ;;   (interactive)
  ;;   (let ((old-modified (buffer-modified-p))
  ;;         (old-point (point)))
  ;;     (call-interactively (beginning-of-buffer))
  ;;     (replace-regexp "\\(.\\)^H\\1^H\\1^H\\1" "\\1")
  ;;     (call-interactively (beginning-of-buffer))
  ;;     (replace-regexp "\\(.\\)^H\\1^H\\1" "\\1")
  ;;     (call-interactively (beginning-of-buffer))
  ;;     (replace-regexp "\\(.\\)^H\\1" "\\1")
  ;;     (call-interactively (beginning-of-buffer))
  ;;     (replace-string "_^H" "")
  ;;     (set-buffer-modified-p old-modified)
  ;;     (goto-char old-point)))

  (defun string/starts-with (string prefix)
    "Return t if STRING starts with prefix."
    (let* ((l (length prefix)))
      (string= (substring string 0 l) prefix)))

  (defun bh-compile ()
    (interactive)
    (let ((df (directory-files "."))
          (has-proj-file nil)
          )
      (while (and df (not has-proj-file))
        (let ((fn (car df)))
          (if (> (length fn) 10)
              (if (string-equal (substring fn -10) ".xcodeproj")
                  (setq has-proj-file t)
                )
            )
          )
        (setq df (cdr df))
        )
      (if has-proj-file
          (compile "xcodebuild -configuration Debug")
        (compile "make")
        )
      )
    )

  (defun kill-region-to-mac ()
    "Copy the region to our mac clipboard"
    (interactive)
    (shell-command-on-region (mark) (point) "ssh -q rtp-chopps-8711.cisco.com pbcopy")
    (deactivate-mark))

  (defun kill-region-to-ssh ()
    "Copy the region to our ssh clients clipboard"
    (interactive)
    (let ((cmd (or (and (getenv "SSH_CLIENT") (concat "ssh -q " (car (split-string (getenv "SSH_CLIENT"))) " pbcopy"))
                   "pbcopy")))
      (message "running command: %s" cmd)
      (shell-command-on-region (mark) (point) cmd))
    (deactivate-mark))

  (setq lastw-screen-window -1)
  (defun bring-screen-window-front ()
    "If running in screen tell screen to switch to our window"
    (let ((window (getenv "WINDOW"))
          (sty (getenv "STY")))
      (if sty
          (shell-command-to-string (concat "screen -X select " window)))))

  (defun return-to-last-screen-window ()
    "Return to previous screen window"
    (if (getenv "STY")
        (shell-command-to-string "screen -X other")))
  (add-hook 'server-visit-hook 'bring-screen-window-front)
  (add-hook 'server-done-hook 'return-to-last-screen-window)
  (remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

  ;; (require 'flymake)

  (defun flymake-elisp-init ()
    (unless (string-match "^ " (buffer-name))
      (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                           'flymake-create-temp-inplace))
             (local-file  (file-relative-name
                           temp-file
                           (file-name-directory buffer-file-name))))
        (list
         (expand-file-name invocation-name invocation-directory)
         (list
          "-Q" "--batch" "--eval"
          (prin1-to-string
           (quote
            (dolist (file command-line-args-left)
              (with-temp-buffer
                (insert-file-contents file)
                (condition-case data
                    (scan-sexps (point-min) (point-max))
                  (scan-error
                   (goto-char(nth 2 data))
                   (princ (format "%s:%s: error: Unmatched bracket or quote\n"
                                  file (line-number-at-pos)))))))
            )
           )
          local-file)))))

  ;; (push '("\\.el$" flymake-elisp-init) flymake-allowed-file-name-masks)

  ;; (add-hook 'emacs-lisp-mode-hook
  ;;           ;; workaround for (eq buffer-file-name nil)
  ;;           (function (lambda () (if buffer-file-name (flymake-mode)))))

  (defun my-lisp-mode-hook ()
    (if debug-init-msg
        (message "my-lisp-mode-hook"))
    (flyspell-prog-mode)
    (set (make-local-variable 'rebox-style-loop) '(83 84 21))
    ;; (set (make-local-variable 'rebox-min-fill-column) 40)
    (define-key lisp-mode-map (kbd "C-c C-n") 'flycheck-next-error)
    (define-key lisp-mode-map (kbd "C-c C-p") 'flycheck-previous-error)
    (define-key emacs-lisp-mode-map (kbd "C-c C-n") 'flycheck-next-error)
    (define-key emacs-lisp-mode-map (kbd "C-c C-p") 'flycheck-previous-error)
    (flycheck-mode 1)
    (rebox-mode 1))

  (add-hook 'lisp-mode-hook 'my-lisp-mode-hook)
  (add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)

  (defun narrow-to-python-string ()
    "Narrow to the multiline string section that contains the point"
    (interactive)
    (let (sstart
          send
          sstr
          (smatch "\\(\"\"\"\\|\'\'\'\\)"))
      (save-excursion

        (if (not (looking-at smatch))
            (re-search-backward "\\(\"\"\"\\|\'\'\'\\)"))
        (setq sstr (match-string 0))
        (setq sstart (match-end 0))
        (goto-char sstart)
        (message (format "sstart %d" sstart))
        (re-search-forward sstr)
        (setq send (match-beginning 0))
        (message (format "send %d" send)))
      (narrow-to-region sstart send)
      (message (format "narrowed to %d:%d" sstart send))
      sstart))

  (defun narrow-to-line ()
    "Narrow to the current line"
    (let (beg end)
      (save-excursion
        (move-end-of-line 1)
        (setq end (point))
        (move-beginning-of-line 1)
        (setq beg (point))
        (message (format "narrow to line %d:%d" beg end)))
      (narrow-to-region beg end)
      (values beg end)))

  (defun delete-line ()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line 1))

  (defun tr-param ()
    "Translate @param to rst style - ``"
    (interactive)
    (save-excursion
      (save-restriction
        (let (beg end val indent ptype sym (tsym "") (ppos 0) (tpos 0) (npos 0)
                  (psmatch "\\(?:@\\(param\\) *\\([[:alnum:]_]+\\) *: *\\|@\\(return\\): *\\)")
                  (pmatch "\\(?:@\\(param\\) *\\([[:alnum:]_]+\\) *: *\\|@\\(return\\): *\\(.*\\)\\)"))
                                          ; Operate in the doc-string only.
          (narrow-to-python-string)
          (save-restriction
            (setq val (narrow-to-line))
            (setq beg (nth 0 val))
            (setq end (nth 1 val))
            (goto-char beg)
            (re-search-forward pmatch))
          (setq ptype (match-string 1))
          (if (not ptype)
              (setq ptype (match-string 3))
            (setq sym (match-string 2)))
          (setq ppos (match-beginning 0))
          (setq indent (- ppos beg)) ; indent of param
          (message (format "beginning %d indent %d" ppos indent))
                                          ; Get any type definition and remove the line
          (ignore-errors
            (save-excursion
              (if (equal ptype "param")
                  (re-search-forward (concat "@type *" sym " *: *\\(.*\\)"))
                (re-search-forward (concat "@rtype: *\\(.*\\)")))
              (setq tpos (match-beginning 0))
              (setq tsym (match-string 1))
              (setq tsym (replace-regexp-in-string "[tT]rue or [fF]alse" "`bool`" tsym))
              (setq tsym (replace-regexp-in-string "\\<string\\>" "`str`" tsym))
              (setq tsym (replace-regexp-in-string "\\<[Bb]oolean\\>" "`bool`" tsym))
              (setq tsym (replace-regexp-in-string "\\<[Bb]ool\\>" "`bool`" tsym))
              (setq tsym (replace-regexp-in-string "\\<integer\\>" "`int`" tsym))
              (setq tsym (replace-regexp-in-string "\\<int\\>" "`int`" tsym))
              (setq tsym (replace-regexp-in-string "\\<list\\(()\\)?" "`list`" tsym))
              (setq tsym (replace-regexp-in-string "\\<dict\\(()\\)?" "`dict`" tsym))
              (setq tsym (replace-regexp-in-string "L{\\([^}]+\\)}" "`\\1`" tsym))
              (save-excursion
                (goto-char tpos)
                (delete-line))))
          (goto-char beg)
          (re-search-forward psmatch)
          (if (equal ptype "param")
              (replace-match (concat "  - `" sym "` (" tsym ") - "))
            (if (equal tsym "")
                (replace-match (concat ":return: "))
              (replace-match (concat ":return: (" tsym ") "))))
          (condition-case nil
              (progn
                (re-search-forward "@\\(param\\|return\\)" nil)
                (point))
            (error (point-max)))))))
  ;; re-indent folloiwng lines to our - until we reach a blank line or a line
  ;; containing @ or the ned of our region

  (defun tr-all-param ()
    "Translate all paramters"
    (interactive)
    (save-excursion
      (let (send
            sstart
            (cpos (point)))
        (save-restriction
          (let (indent)
            ;; Operate in the doc-string only.
            (setq sstart (narrow-to-python-string))
            (goto-char sstart)
            (setq cpos sstart)
            (setq send (point-max))
            (message (format "pmax %d" send))
            ;; Find the first param
            (re-search-forward "^\\( +\\)@param")
            (setq indent (match-string 1))
            (replace-match (concat indent ":Parameters:\n" indent "@param"))))
        ;; now run tr-param until we are done
        (while (< cpos send)
          (setq cpos (tr-param))
          (goto-char cpos)))))

  (defun read-lines (fPath)
    "Return a list of lines of a file at FPATH."
    (with-temp-buffer
      (insert-file-contents fPath)
      (split-string (buffer-string) "\n" t)))

  (eval-after-load "elisp-mode"
    '(progn
       (modify-syntax-entry ?_ "w" emacs-lisp-mode-syntax-table)
       (modify-syntax-entry ?- "w" emacs-lisp-mode-syntax-table)
       ))

  (eval-after-load "lisp-mode"
    '(progn
       (modify-syntax-entry ?_ "w" lisp-mode-syntax-table)
       (modify-syntax-entry ?- "w" lisp-mode-syntax-table)
       ))
#+end_src
*** Generic Editing
#+begin_src emacs-lisp :tangle yes
  (autoload 'rebox-comment "rebox2" nil t)
  (autoload 'rebox-region "rebox2" nil t)

  ;;(global-linum-mode nil)
  ;;(setq linum-format 'dynamic)
  ;;(set-face-attribute 'linum nil :background "Black"))

  ;;        (add-hook 'emacs-lisp-mode-hook (lambda ()
  ;;                                          (set (make-local-variable 'rebox-style-loop) '(25 17 21))
  ;;                                          (set (make-local-variable 'rebox-min-fill-column) 40)
  ;;                                          (rebox-mode 1)))
  ;
  (eval-after-load "rebox2"
    '(progn
       (setq max-comment-fill-column 77)
       (defadvice rebox-get-fill-column (after ad-max-comment-fill-column activate)
         "Set a maximum fill-column for comments"
         (setq ad-return-value (min ad-return-value max-comment-fill-column)))
       (ad-activate 'rebox-get-fill-column)
       (message "rebox2 loaded")
       (rebox-register-template 71 176 ["? ----------"
                                        "? box123456  "
                                        "? ----------"])

       (rebox-register-template 72 276 ["? ----------+"
                                        "? box123456  "
                                        "? ----------+"])

       (rebox-register-template 73 376 ["? =========="
                                        "? box123456  "
                                        "? =========="])

       (rebox-register-template 74 176 ["?-----------"
                                        "? box123456 "
                                        "?-----------"])

       (rebox-register-template 75 276 ["?-----------+"
                                        "? box123456  "
                                        "?-----------+"])

       (rebox-register-template 76 376 ["?==========="
                                        "? box123456"
                                        "?==========="])

       (rebox-register-template 77 576 ["????????????"
                                        "? box123456  "
                                        "????????????"])

       (rebox-register-template 81 186 ["?? -----------"
                                        "??  box123456  "
                                        "?? -----------"])

       (rebox-register-template 82 286 ["??-----------+"
                                        "?? box123456  "
                                        "??-----------+"])

       (rebox-register-template 83 386 ["??-----------"
                                        "?? box123456  "
                                        "??-----------"])

       (rebox-register-template 84 486 ["??==========="
                                        "?? box123456  "
                                        "??==========="])
       (setq rebox-style-loop '(74 75 76 11))

       ;; (rebox-set-default-style 093)
       ;; (setq rebox-style-loop '(24 16))
       ;; Leave the defaults
       ;; (global-set-key [(meta q)] 'rebox-dwim)
       ;; (global-set-key [(shift meta q)] 'rebox-fill)
       ))



  (require 'filladapt)
  (setq-default filladapt-mode t)
#+end_src
*** Rectangle Lisp
**** Transpose Rectange
#+BEGIN_SRC emacs-lisp
  (defun transpose-array (array)
    "Returns a new array which is a transposed copy of
  ARRAY (vector, string, or bool-vector)."
    (let* ((length (length array))
           (result (apply (cond ((vectorp array) 'make-vector)
                                ((stringp array) 'make-string)
                                ((bool-vector-p array) 'make-bool-vector)
                                (t (signal 'wrong-type-argument '(arrayp array))))
                          (list length 0)))
           (index length))
      (while (> index 0)
        (setq index (1- index))
        (aset result index (aref array (- length 1 index))))
      result))

  (defun ntranspose-array (array)
    "Transposes the characters in ARRAY. Returns ARRAY."
    (let* ((length (length array))
           (index (/ length 2)))
      (while (> index 0)
        (setq index (1- index))
        (let ((tmp (aref array index)))
          (aset array index (aref array (- length 1 index)))
          (aset array (- length 1 index) tmp)))
      array))

  ;;;###autoload
  (defun transpose-rectangle (start end &optional horizontal vertical)
    "Replace the region-rectangle with its mirror image.

  By default, only horizontal transposition is done. With a prefix
  argument, ask whether to transpose horizontally and/or vertically.

  If HORIZONTAL is non-nil, each line in the rectangle is transposed.
  If VERTICAL is non-nil, all lines in the rectangle are transposed.

  When called from a program, the rectangle's corners are START and END."
    (interactive
     (append (list (region-beginning) (region-end))
             (if current-prefix-arg
                 (list (y-or-n-p "Transpose horizontally? ")
                       (y-or-n-p "Transpose vertically? "))
               '(t nil))))
    (let ((rect (delete-extract-rectangle start end)))
      (when vertical
        (setq rect (nreverse rect)))
      (when horizontal
        (setq rect (mapcar (function ntranspose-array) rect)))
      (goto-char start)
      (insert-rectangle rect)))
#+END_SRC

*** URL Browsing
#+begin_src emacs-lisp :tangle no
  (req-package browse-url
    :commands browse-url-generic
    :init
    (progn
      (if debug-init-msg
          (message "Mark post browse-url init")))
    :config
    (progn
      (if debug-init-msg
          (message "Mark post browse-url config"))
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "openurl.sh")))
#+end_src
*** RFCs
#+begin_src emacs-lisp :tangle yes
  ;; (req-package rfcview
  ;;   :commands rfcview-mode
  ;;   :mode (("/\\(rfc|std\\)[0-9]+\\.txt\\'" . rfcview-mode)
  ;;          ("/draft-[-_a-zA-Z0-9].+.txt\\'" . rfcview-mode)))
  (req-package irfc
    :commands irfc-mode
    :mode (("/\\(rfc|std\\)[0-9]+\\.txt\\'" . irfc-mode)
           ("/draft-[-_a-zA-Z0-9].+.txt\\'" . irfc-mode))
    :init
    (progn
      (setq irfc-directory (if (file-directory-p "~/Dropbox/RFCs")
                                "~/Dropbox/RFCs"
                              "~/RFCs")))
    :config
    (progn
      (make-directory irfc-directory t)))
#+end_src
*** Acme Extension
#+begin_src emacs-lisp :tangle yes
  (defun is-workspace-root (split-path)
    (let ((path (concat "/" (mapconcat 'identity split-path "/") "/.ACMEROOT")))
      (file-attributes path)))

  (defun get-workspace-root ()
    (let ((split-path (split-string (expand-file-name default-directory) "/")))
      (while (and (> (length split-path) 0)
                  (not (is-workspace-root split-path)))
        (setq split-path (remove-last-elt split-path)))
      (concat "/" (mapconcat 'identity split-path "/"))))

  ;;
  ;; XXX this needs to be updated to find the right path
  ;;
  (defun acme-ediff-latest()
   (interactive)
   (let* (
          (rel-cur-file (file-relative-name buffer-file-name))
          (acme-dir (concat  ".CC/cache/"  rel-cur-file  "@@/main/ci/fwd-33/fwd-33-mcast-intact/"))
          (version-list (directory-files acme-dir nil "[0-9]+" t))
          (latest-version (car version-list))
          (rel-base-file (concat  ".CC/cache/"  rel-cur-file  "@@/main/ci/fwd-33/fwd-33-mcast-intact/" latest-version))
          )
     (ediff-files rel-cur-file rel-base-file)))
#+end_src

*** Tagging
#+begin_src emacs-lisp :tangle yes
    ;; ggtags-mode is a minor mode, this kills proper major mode init
    ;; :mode ( "\\.\\(bag\\|bgen\\|cmd\\|m\\|mm\\|sch\\)\\'" . ggtags-mode )
    ;; bind is what we want and then enable ggtags mode if not enabled
  (req-package ggtags
    :require evil
    :commands enable-ggtags-mode
    :init
    (progn
      (add-hook 'c-mode-hook      'enable-ggtags-mode)
      (add-hook 'c++-mode-hook    'enable-ggtags-mode)
      (add-hook 'html-mode-hook   'enable-ggtags-mode)
      (add-hook 'java-mode-hook   'enable-ggtags-mode)
      ;; this causes us to autoload ggtags, hardly needed most of the time in *scratch*
      ;; (add-hook 'emacs-lisp-mode-hook 'enable-ggtags-mode)
      ;; (add-hook 'lisp-mode-hook   'enable-ggtags-mode)
      ;; (add-hook 'lisp-interaction-mode-hook 'enable-ggtags-mode)
      (add-hook 'objc-mode-hook   'enable-ggtags-mode)
      (add-hook 'python-mode-hook 'enable-ggtags-mode)
      (add-hook 'perl-mode-hook   'enable-ggtags-mode)
      (setq ggtags-mode-prefix-key (kbd "C-c C-.")))
    :config
    (progn
      (if debug-init-msg
          (message "Mark pre gtags mode config"))
      (defun enable-ggtags-mode ()
        (ggtags-mode 1))
      ;; (setq gtags-suggested-key-mapping t)
      ;; (setq gtags-use-old-key-map t)

      ;;; ggtags keys
      ;; (define-key ggtags-mode-map "\eh" 'gtags-display-browser)
      ;; (define-key ggtags-mode-map "\ec" 'gtags-make-complete-list)

      (define-key ggtags-mode-map (kbd "C-]") 'ggtags-find-tag-dwim)
      ;;(define-key evil-normal-state-map (kbd "C-]") 'evil-undefine)

      (define-key ggtags-mode-map (kbd "M-]") 'ggtags-find-definition)
      ;;(define-key evil-normal-state-map (kbd "C-]") 'evil-undefine)

      (define-key ggtags-mode-map (kbd "C-t") 'pop-tag-mark)
      ;;(define-key evil-normal-state-map (kbd "C-t") 'evil-undefine)

      (define-key ggtags-mode-map (kbd "M-s") 'ggtags-find-other-symbol)
      ;; (define-key evil-normal-state-map (kbd "M-s") 'evil-undefine)

      (define-key ggtags-mode-map (kbd "M-r") 'ggtags-find-reference)
      ;;(define-key evil-normal-state-map (kbd "M-r") 'evil-undefine)

      ;; (define-key ggtags-mode-map "\el" 'gtags-find-file)
      ;; (define-key ggtags-mode-map "\eg" 'gtags-find-with-grep)
      ;; (define-key ggtags-mode-map "\eI" 'gtags-find-with-idutils)
      ;; (define-key ggtags-mode-map "\et" 'gtags-find-tag)

      ;; need to undefine a couple keys in evil.
      (setq evil-overriding-maps (cons '(gtags-mode-map . nil) evil-overriding-maps))
      (setq evil-overriding-maps (cons '(gtags-select-mode-map . nil) evil-overriding-maps))

      ;;
      ;; Gtags custom functionality
      ;;

      (defun get-newtags-buffer-name ()
        (concat "*newtags-" (get-workspace-root) "-*"))

      (defun get-newtags-proc-name ()
        (concat "newtags-" (get-workspace-root) ""))

      (defun is-newtags-running ()
        (let ((wsroot (get-workspace-root))
              (tag-buffer (get-buffer (get-newtags-buffer-name))))
          (if (not tag-buffer)
              nil
            (save-current-buffer
              (set-buffer tag-buffer)
              (if (eq (process-status tag-process) 'exit)
                  nil
                t)))))

      (defun run-newtags ()
        (interactive)
        (let ((wsroot (get-workspace-root))
              (tag-buffer (get-buffer (get-newtags-buffer-name))))
          (if (not tag-buffer)
              (save-current-buffer
                (setq tag-buffer (get-buffer-create (get-newtags-buffer-name)))
                (setq tag-proc-name nil)
                (setq tag-process nil)
                (set-buffer tag-buffer)
                (make-local-variable 'tag-proc-name)
                (make-local-variable 'tag-process)
                (setq tag-proc-name (get-newtags-proc-name))
                (cd wsroot)
                (setq tag-process (start-process tag-proc-name tag-buffer "newtags")))
            ;; We have a buffer is the process running?
            (if (is-newtags-running)
                (save-current-buffer
                  (set-buffer tag-buffer)
                  (let ()
                    (cd wsroot)
                    (setq tag-process (start-process tag-proc-name tag-buffer "newtags"))))
              (process-status tag-process)))))

      (defun get-gtags-dir ()
        (interactive)
        (let ((path (shell-command-to-string "global -pr")))
          (if (eq (elt path 0) ?/)
              (substring path 0 -1)
            nil)))

      (defun gtags-update (&optional iactive)
        (interactive (list t))
        (if (and iactive
                 gtags-mode
                 (not (is-newtags-running)))
            (save-excursion
              (if (not (get-gtags-dir))
                  (if (y-or-n-p "No GTAGS file run newtags? ")
                      (run-newtags))
                (let ((file-path (expand-file-name buffer-file-name))
                      (gpath (expand-file-name (get-gtags-dir))))
                  (setq file-path
                        (subseq file-path (1+ (length gpath)) (length file-path)))
                  (cd gpath)
                  ;; (shell-command-to-string (concat
                  (shell-command-to-string (concat "gtags --single-update=" file-path))))
              )))

      ;;
      ;; Run gtags update on save -- XXX this can take a long time actually
      ;;
                                          ;(add-hook 'after-save-hook 'gtags-update)
      (if debug-init-msg
          (message "Mark post gtags mode config"))
      )
    )
#+end_src
*** Mail
#+begin_src emacs-lisp :tangle yes
  (setq mail-from-style 'angles)
  (setq mail-archive-file-name (expand-file-name "~/Personal/Mail/mail-archive"))
#+end_src

*** Screen/TMUX
#+begin_src emacs-lisp :tangle yes
  (defun sigusr1-handler ()
    (interactive)
    (message "Caught signel %S" last-input-event)
    (let ((lines (split-string (shell-command-to-string "tmux show-environment") "\n" t)))
      (while lines
        (let ((tup (split-string (car lines) "=" t)))
          (if (not (string/starts-with (car tup) "-"))
              (progn
                (setenv (car tup) (cadr tup))
                (message "Updating %s with %s" (car tup) (cadr tup))))
          (setq lines (cdr lines))))))

  (let ((tmux (getenv "TMUX"))
        (sty (getenv "STY")))
    (if debug-init-msg
        (message "Got sty of %s" sty))
    (if sty
        (progn
          (message "Enabling gnu-screen signal handling")
          (defun sigusr1-handler ()
            (interactive)
            (message "Caught signel %S" last-input-event)
            (let ((spid (car (split-string (getenv "STY") "\\."))))
              (message "Got spid %s" spid)
              (if (file-exists-p (concat "/tmp/screen." spid ".vars"))
                  (let ((newlines (read-lines (concat "/tmp/screen." spid ".vars"))))
                    (while newlines
                      (let ((tup (split-string (substring (car newlines) 7) "=")))
                        (setenv (car tup) (substring (cadr tup) 1 -1))
                        (message "Updating %s with %s" (car tup)  (substring (cadr tup) 1 -1)))
                      (setq newlines (cdr newlines))))
                (message "File %s doesn't exist" (concat "/tmp/screen." spid ".vars")))))
          (define-key special-event-map [sigusr1] 'sigusr1-handler)))
    (if tmux
        (progn
          (message "Enabling TMUX signal handling")
          (define-key special-event-map [sigusr1] 'sigusr1-handler))))
#+end_src

*** Programming
**** All Programming Mode Hook
#+begin_src emacs-lisp :tangle yes
  ;; XXX we really want this to be a hook itself.
  (defun all-prog-mode-hook () nil)
     ;; rainbow-delimiters-mode t)
#+end_src
**** Projects
#+begin_src emacs-lisp :tangle yes
  (req-package projectile
    :commands projectile-mode
    :interpreter ("projectile" . projectile-mode))
#+end_src
**** Yang
IETF Yang mode.
#+begin_src emacs-lisp :tangle yes
  (req-package yang-mode
   :commands yang-mode
   :mode ("\\.yang$" . yang-mode))
#+end_src
**** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package flycheck
    :commands flycheck-mode
    :config
    (progn
      (if debug-init-msg
          (message "Mark pre flycheck config"))
      (flycheck-define-checker python-pycheckers
        "A python syntax and style checker using flake8 and pylint."
        :command ("pycheckers.sh"
                  (config-file "-8" flycheck-flake8rc)
                  (config-file "-r" flycheck-pylintrc)
                  source-inplace)
        :error-patterns
        ((error line-start
                (file-name) ":" line ":" (optional column ":") " "
                (message "E" (one-or-more digit) (zero-or-more not-newline))
                line-end)
         (warning line-start
                  (file-name) ":" line ":" (optional column ":") " "
                  (message (or "F"            ; Pyflakes in Flake8 >= 2.0
                               "W"            ; Pyflakes in Flake8 < 2.0
                               "C")           ; McCabe in Flake >= 2.0
                           (one-or-more digit) (zero-or-more not-newline))
                  line-end)
         (info line-start
               (file-name) ":" line ":" (optional column ":") " "
               (message (or "N"              ; pep8-naming in Flake8 >= 2.0
                            "R")             ; re-factor from python.
                        (one-or-more digit) (zero-or-more not-newline))
               line-end)
         )
        :modes python-mode)
      (add-hook 'after-init-hook 'global-flycheck-mode)
      (if debug-init-msg
          (message "Mark post flycheck config"))
      ))
#+END_SRC
**** CC Mode
#+begin_src emacs-lisp
  (req-package cc-mode
    ;; :require projectile
    :commands (awk-mode c-mode c++-mode java-mode objc-mode)
    ;; :mode (("\\.c\\'"  . c-mode)
    ;;        ("\\.h\\'"  . c-mode)
    ;;        ("\\.m\\'"  . objc-mode)
    ;;        ("\\.java\\'" . java-mode)
    ;;        ("\\.C\\'"  . c++-mode)
    ;;        ("\\.H\\'"  . c++-mode)
    ;;        ("\\.cc\\'" . c++-mode)
    ;;        ("\\.hh'"   . c++-mode))
    :config
    (progn
      (if debug-init-msg
        (message "Mark pre CC mode config"))
      ;; (modify-syntax-entry ?_ "w" awk-mode-syntax-table)
      (modify-syntax-entry ?_ "w" c-mode-syntax-table)
      (modify-syntax-entry ?_ "w" objc-mode-syntax-table)
      (modify-syntax-entry ?_ "w" c++-mode-syntax-table)
      ;; (modify-syntax-entry ?_ "w" java-mode-syntax-table)
      ;; (modify-syntax-entry ?_ "w" objc-mode-syntax-table)
      (add-hook 'c-mode-hook
                (function (lambda ()
                            (all-prog-mode-hook)
                            (if (string= (shell-command-to-string "uname -s") "NetBSD\n")
                                (progn
                                  (c-set-style "KNF")
                                  (setq indent-tabs-mode t))
                              (c-set-style "Procket")
                              (setq indent-tabs-mode nil))
                            (c-toggle-auto-hungry-state 1)
                            (setq fill-column 80)
                            (turn-on-auto-fill)
                            (flyspell-prog-mode)
                            (projectile-mode t)
                            )))

      (c-add-style
       "KNF"
       '((c-basic-offset . 8)
         (c-comment-only-line-offset . 0)
         (c-label-minimum-indentation . 0)
         (c-tab-always-indent    . t)
         (c-hanging-semi&comma-criteria (lambda () 'stop))
         (c-hanging-braces-alist . ((class-open) (class-close) (defun-open)
                                    (defun-close) (inline-open) (inline-close)
                                    (brace-list-open) (brace-list-close)
                                    (brace-list-intro) (brace-list-entry)
                                    (block-open) (block-close) (substatement-open)
                                    (statement-case-open) (extern-lang-open)
                                    (extern-lang-close)))
         (c-hanging-colons-alist     . ((access-label)
                                        (case-label)
                                        (label)
                                        (member-init-intro)
                                        (inher-intro)))
                                          ;   (c-cleanup-list             . (scope-operator
                                          ;                                 empty-defun-braces
                                          ;                                 defun-close-semi))
         (c-offsets-alist . ((string                . -1000)
                             (c                     . c-lineup-C-comments)
                             (defun-open            . 0)
                             (defun-close           . 0)
                             (defun-block-intro     . +)
                             (func-decl-cont        . 0)
                                          ; above is ansi        (func-decl-cont        . 0)
                             (knr-argdecl-intro     . 0)
                             (knr-argdecl           . 0)
                             (topmost-intro         . 0)
                             (topmost-intro-cont    . 0)
                             (block-open            . 0)
                             (block-close           . 0)
                             (brace-list-open       . 0)
                             (brace-list-close      . 0)
                             (brace-list-intro      . +)
                             (brace-list-entry      . 0)
                             (statement             . 0)
                             (statement-cont        . 4)
                             (statement-block-intro . +)
                             (statement-case-intro  . +)
                             (statement-case-open   . 0)
                             (substatement          . +)
                             (substatement-open     . 0)
                             (case-label            . 0)
                             (label                 . -)
                             (do-while-closure      . 0)
                             (else-clause           . 0)
                             (comment-intro         . c-lineup-comment)
                             (arglist-intro         . 4)
                             (arglist-cont          . 0)
                             (arglist-cont-nonempty . 4)
                             (arglist-close         . 4)
                             (cpp-macro             . -1000)
                             ))))

      (c-add-style
       "Procket"
       '((c-basic-offset . 4)
         (c-comment-only-line-offset . 0)
         (c-label-minimum-indentation . 0)
         (c-tab-always-indent    . t)
         (c-hanging-semi&comma-criteria (lambda () 'stop))
         (c-hanging-braces-alist . ((class-open) (class-close) (defun-open)
                                    (defun-close) (inline-open) (inline-close)
                                    (brace-list-open) (brace-list-close)
                                    (brace-list-intro) (brace-list-entry)
                                    (block-open) (block-close) (substatement-open)
                                    (statement-case-open) (extern-lang-open)
                                    (extern-lang-close)))
         (c-hanging-colons-alist     . ((access-label)
                                        (case-label)
                                        (label)
                                        (member-init-intro)
                                        (inher-intro)))
                                          ;   (c-cleanup-list             . (scope-operator
                                          ;                                 empty-defun-braces
                                          ;                                 defun-close-semi))
         (c-offsets-alist . ((string                . -1000)
                             (c                     . c-lineup-C-comments)
                             (defun-open            . 0)
                             (defun-close           . 0)
                             (defun-block-intro     . +)
                             (func-decl-cont        . 0)
                                          ; above is ansi        (func-decl-cont        . 0)
                             (knr-argdecl-intro     . 0)
                             (knr-argdecl           . 0)
                             (topmost-intro         . 0)
                             (topmost-intro-cont    . 0)
                             (block-open            . 0)
                             (block-close           . 0)
                             (brace-list-open       . 0)
                             (brace-list-close      . 0)
                             (brace-list-intro      . +)
                             (brace-list-entry      . 0)
                             (statement             . 0)
                             (statement-cont        . c-lineup-math)
                             (statement-block-intro . +)
                             (statement-case-intro  . +)
                             (statement-case-open   . 0)
                             (substatement          . +)
                             (substatement-open     . 0)
                             (case-label            . 0)
                             (label                 . -)
                             (do-while-closure      . 0)
                             (else-clause           . 0)
                             (comment-intro         . c-lineup-comment)
                             (arglist-intro         . 4)
                             (arglist-cont          . 0)
                             (arglist-cont-nonempty . c-lineup-arglist)
                             (arglist-close         . 4)
                             (cpp-macro             . -1000)
                             ))))
      ;; (require 'enable-completion)
      ;; (require 'enable-acme)

      ;; (defun find-root-and-create-project ()
      ;;   (interactive)
      ;;   (let ((wsroot (get-workspace-root))
      ;;         (sysinc '())
      ;;         (inc '())
      ;;         wsels
      ;;         )
      ;;     (if (string-equal "/" wsroot)
      ;;         nil
      ;;       (setq wsels (split-string wsroot "/"))
      ;;       (setq pname (car (last wsels 2)))
      ;;       ; Would be better to grab all the directories under wsroot/inc
      ;;       (ede-cpp-root-project (concat pname "-ede")
      ;;                             :file (concat wsroot "Jamfile")
      ;;                             :system-include-path (list (concat wsroot "/nobackup/chopps/s/inc/x86l32/global/iosxr-os/os/"))
      ;;                             :include-path (list (concat wsroot "/nobackup/chopps/s/inc/x86l32/global/iosxr-os/"))))))

      (if debug-init-msg
        (message "Mark post CC mode config"))
      ))
#+end_src
**** Emacs-lisp
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-lisp-mode-hook 'all-prog-mode-hook)
#+end_src
**** Perl
#+begin_src emacs-lisp :tangle yes
  (req-package perl-mode
    :commands perl-mode
    :mode ("\\.pl\\'" . perl-mode)
    :interpreter ("perl" . perl-mode)
    :init (add-hook 'perl-mode-hook 'all-prog-mode-hook))
#+end_src

**** Python
#+begin_src emacs-lisp
  (req-package elpy
    :commands elpy-enable
    :init
    (progn
      ;; (setq elpy-rpc-backend "jedi")
      (if debug-init-msg
        (message "Mark pre elpy mode init"))

      (when (not (setq python-check-command (executable-find "pycheckers.sh")))
        (setq python-check-command "flake8"))
      (if debug-init-msg
        (message "Mark post elpy mode init"))
      ))

  (req-package jedi
    :commands jedi:setup
    :init
   (progn
      (if debug-init-msg
        (message "Mark pre jedi mode init"))
     ;; (setq jedi:server-args '("--log-traceback"))
     (add-hook 'python-mode-hook 'jedi:setup)
      (if debug-init-msg
        (message "Mark post jedi mode init"))
    )
   )

  (req-package nose
    :commands (nosetests-all nosetests-module nosetests-one nosetests-pdb-all nosetests-pdb-module nosetests-pdb-one)

    :init
    (progn
     (setq nose-project-root-files '("setup.py" ".hg" ".git" ".svn"))))

  (req-package pytest
    :commands (pytest-all
                pytest-module
                pytest-one
                pytest-directory
                pytest-pdb-all
                pytest-pdb-module
                pytest-pdb-one)
    :init
    (progn
      (setq pytest-global-name "py.test")
      (setq pytest-cmd-flags "-x --doctest-module")
      ))

  (req-package flymake-pyfixers
    :init
    (progn
      (if debug-init-msg
          (message "Mark post flymake-pyfixers init"))
      )
    :config
    (progn
      (if debug-init-msg
          (message "Mark post flymake-pyfixers config"))
      )
    )

  (req-package pylookup
    :commands (pylookup-lookup pylookup-update)
    :init
    (progn
      (setq pylookup-dir (concat user-emacs-directory "el-get/pylookup/"))
      (setq pylookup-program (concat pylookup-dir "/pylookup.py"))
      (setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))
      ))

  (if debug-init-msg
      (message "Mark post pylookup"))

  (req-package python
    :commands python-mode
    :mode (("\\.py\\'" . python-mode))
    :interpreter ("python" . python-mode)
    :init
    (progn
      (if debug-init-msg
          (message "Mark pre python init"))
      (setq python-font-lock-keywords
            ;; Keywords
            `(,(rx symbol-start
                   (or
                    "and" "del" "from" "not" "while" "as" "elif" "global" "or" "with"
                    "assert" "else" "if" "pass" "yield" "break" "except" "import" "class"
                    "in" "raise" "continue" "finally" "is" "return" "def" "for" "lambda"
                    "try"
                    ;; Python 2:
                    "print" "exec"
                    ;; Python 3:
                    ;; False, None, and True are listed as keywords on the Python 3
                    ;; documentation, but since they also qualify as constants they are
                    ;; fontified like that in order to keep font-lock consistent between
                    ;; Python versions.
                    "nonlocal"
                    ;; Extra:
                    ;; XXX chopps "self")
                    )
                   symbol-end)
              (,(rx symbol-start
                    (or "self")
                    symbol-end) . font-lock-constant-face)
              ;; functions
              (,(rx symbol-start "def" (1+ space) (group (1+ (or word ?_))))
               (1 font-lock-function-name-face))
              ;; classes
              (,(rx symbol-start "class" (1+ space) (group (1+ (or word ?_))))
               (1 font-lock-type-face))
              ;; Constants
              (,(rx symbol-start
                    (or
                     "Ellipsis" "False" "None" "NotImplemented" "True" "__debug__"
                     ;; copyright, license, credits, quit and exit are added by the site
                     ;; module and they are not intended to be used in programs
                     "copyright" "credits" "exit" "license" "quit")
                    symbol-end) . font-lock-constant-face)
              ;; Decorators.
              (,(rx line-start (* (any " \t")) (group "@" (1+ (or word ?_))
                                                      (0+ "." (1+ (or word ?_)))))
               (1 font-lock-type-face))
              ;; Builtin Exceptions
              (,(rx symbol-start
                    (or
                     "ArithmeticError" "AssertionError" "AttributeError" "BaseException"
                     "DeprecationWarning" "EOFError" "EnvironmentError" "Exception"
                     "FloatingPointError" "FutureWarning" "GeneratorExit" "IOError"
                     "ImportError" "ImportWarning" "IndexError" "KeyError"
                     "KeyboardInterrupt" "LookupError" "MemoryError" "NameError"
                     "NotImplementedError" "OSError" "OverflowError"
                     "PendingDeprecationWarning" "ReferenceError" "RuntimeError"
                     "RuntimeWarning" "StopIteration" "SyntaxError" "SyntaxWarning"
                     "SystemError" "SystemExit" "TypeError" "UnboundLocalError"
                     "UnicodeDecodeError" "UnicodeEncodeError" "UnicodeError"
                     "UnicodeTranslateError" "UnicodeWarning" "UserWarning" "VMSError"
                     "ValueError" "Warning" "WindowsError" "ZeroDivisionError"
                     ;; Python 2:
                     "StandardError"
                     ;; Python 3:
                     "BufferError" "BytesWarning" "IndentationError" "ResourceWarning"
                     "TabError")
                    symbol-end) . font-lock-type-face)
              ;; Builtins
              (,(rx symbol-start
                    (or
                     "abs" "all" "any" "bin" "bool" "callable" "chr" "classmethod"
                     "compile" "complex" "delattr" "dict" "dir" "divmod" "enumerate"
                     "eval" "filter" "float" "format" "frozenset" "getattr" "globals"
                     "hasattr" "hash" "help" "hex" "id" "input" "int" "isinstance"
                     "issubclass" "iter" "len" "list" "locals" "map" "max" "memoryview"
                     "min" "next" "object" "oct" "open" "ord" "pow" "print" "property"
                     "range" "repr" "reversed" "round" "set" "setattr" "slice" "sorted"
                     "staticmethod" "str" "sum" "super" "tuple" "type" "vars" "zip"
                     "__import__"
                     ;; Python 2:
                     "basestring" "cmp" "execfile" "file" "long" "raw_input" "reduce"
                     "reload" "unichr" "unicode" "xrange" "apply" "buffer" "coerce"
                     "intern"
                     ;; Python 3:
                     "ascii" "bytearray" "bytes" "exec"
                     ;; Extra:
                     "__all__" "__doc__" "__name__" "__package__")
                    symbol-end) . font-lock-builtin-face)
              ;; assignments
              ;; support for a = b = c = 5
              (,(lambda (limit)
                  (let ((re (python-rx (group (+ (any word ?. ?_)))
                                       (? ?\[ (+ (not (any  ?\]))) ?\]) (* space)
                                       assignment-operator))
                        (res nil))
                    (while (and (setq res (re-search-forward re limit t))
                                (or (python-syntax-context 'paren)
                                    (equal (char-after (point-marker)) ?=))))
                    res))
               (1 font-lock-variable-name-face nil nil))
              ;; support for a, b, c = (1, 2, 3)
              (,(lambda (limit)
                  (let ((re (python-rx (group (+ (any word ?. ?_))) (* space)
                                       (* ?, (* space) (+ (any word ?. ?_)) (* space))
                                       ?, (* space) (+ (any word ?. ?_)) (* space)
                                       assignment-operator))
                        (res nil))
                    (while (and (setq res (re-search-forward re limit t))
                                (goto-char (match-end 1))
                                (python-syntax-context 'paren)))
                    res))
               (1 font-lock-variable-name-face nil nil))))
      (if debug-init-msg
          (message "Mark post python init"))
      )
    :config
    (progn
      (if debug-init-msg
          (message "Mark pre python config"))
      (defun my-python-mode-hook ()
        (if debug-init-msg
            (message "Python mode hook"))
        (all-prog-mode-hook)
        ;; Fill values
        (if debug-init-msg
            (message "Mark pre req pyfixers"))
        (require 'flymake-pyfixers)
        (if debug-init-msg
            (message "Mark post req pyfixers"))
        (setq comment-column 60)
        (setq fill-column 120)
        (turn-on-auto-fill)
        (highlight-indentation-mode -1)
        (define-key python-mode-map (kbd "C-c M-\\") 'pyfixer:ignore-current-line)
        (define-key python-mode-map (kbd "C-c C-\\") 'pyfixer:fix-current-line)
        (define-key python-mode-map (kbd "C-c C-M-\\") 'pyfixer:fix-all-errors)
        (define-key python-mode-map (kbd "C-c 8") 'pyfixer:fix-all-errors)
        (define-key python-mode-map (kbd "C-c h") 'pylookup-lookup)
        (define-key python-mode-map (kbd "C-c ta") 'pytest-all)
        (define-key python-mode-map (kbd "C-c tm") 'pytest-module)
        (define-key python-mode-map (kbd "C-c to") 'pytest-one)
        (define-key python-mode-map (kbd "C-c td") 'pytest-directory)
        (define-key python-mode-map (kbd "C-c tpa") 'pytest-pdb-all)
        (define-key python-mode-map (kbd "C-c tpm") 'pytest-pdb-module)
        (define-key python-mode-map (kbd "C-c tpo") 'pytest-pdb-one)
        (define-key python-mode-map (kbd "C-c Ta") 'nosetests-all)
        (define-key python-mode-map (kbd "C-c Tm") 'nosetests-module)
        (define-key python-mode-map (kbd "C-c To") 'nosetests-one)
        (define-key python-mode-map (kbd "C-c Tpa") 'nosetests-pdb-all)
        (define-key python-mode-map (kbd "C-c Tpm") 'nosetests-pdb-module)
        (define-key python-mode-map (kbd "C-c Tpo") 'nosetests-pdb-one)

        (if debug-init-msg
          (message "Enabling python flyspell"))
        (flyspell-prog-mode)

        (if debug-init-msg
            (message "Enabling projectile"))
        (projectile-mode t)

        (flycheck-mode t)
        (flycheck-select-checker 'python-pycheckers)
        (flycheck-set-checker-executable 'python-flake8 "~/bin/pycheckers.sh")
        (if debug-init-msg
            (message "Enabling rebox"))
        (set (make-local-variable 'rebox-style-loop) '(74 75 76 11))
        (rebox-mode 1)

        (if debug-init-msg
            (message "Enabling elpy"))
        (elpy-enable)
        (define-key python-mode-map (kbd "M-n") 'flycheck-next-error)
        (define-key python-mode-map (kbd "M-p") 'flycheck-previous-error)
        (add-to-list 'compilation-error-regexp-alist '("\\(.*\\):[CEFRW][0-9]+: ?\\([0-9]+\\),[0-9]+: .*" 1 2))
        (if debug-init-msg
            (message "Python mode hook done"))
        )

      ;; Elpy config
      ;; (define-key elpy-mode-map (kbd "C-c C-n") 'next-error)
      ;; (define-key elpy-mode-map (kbd "C-c C-p") 'previous-error)
      ;; (elpy-use-ipython)
      ;; (elpy-clean-modeline)

      ;; Python config
      (add-hook 'python-mode-hook 'my-python-mode-hook)

      ;; Consider _ a part of words for python
      (modify-syntax-entry ?_ "w" python-mode-syntax-table)

      (setq
       python-shell-interpreter "ipython"
       python-shell-interpreter-args ""
       python-shell-prompt-regexp "In \\[[0-9]+\\]: "
       python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
       python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
       python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
       python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

      ;; (define-key global-map (kbd "C-c o") 'iedit-mode)

      (if (file-exists-p "/home/chopps/sw/xrut-cel-5/bin/python")
          (setenv "PYMACS_PYTHON" "/home/chopps/sw/xrut-cel-5/bin/python")
        (if (file-exists-p "/auto/xrut/sw/xrut-cel-5/bin/python")
            (setenv "PYMACS_PYTHON" "/auto/xrut/sw/xrut-cel-5/bin/python")
          (if (file-exists-p "/Users/chopps/venv/bin/python"  )
              (setenv "PYMACS_PYTHON" "/Users/chopps/venv/bin/python")
            (if (file-exists-p "/usr/local/bin/python"  )
                (setenv "PYMACS_PYTHON" "/usr/local/bin/python")))))

      (defun python-sort-import-list ()
        "Split an single import lines with multiple module imports into separate lines sort results"
        (interactive)
        (if (not (use-region-p))
            (error "No region defined"))
        (let* ((start (region-beginning))
               (end (region-end))
               (value 0)
               found)
          (save-excursion
            (let* (modlist impstart impend bigstr)
              (setq modlist '())
              (goto-char start)
              (when (re-search-forward "^import \\([[:alnum:]_,\\. ]+\\)$" end t)
                (setq impstart (match-beginning 0))
                (setq impend (match-end 0))
                (setq modlist (append modlist (mapcar 's-trim (s-split "," (match-string 1)))))
                (while (setq found (re-search-forward "^import \\([[:alnum:]_,\\. ]+\\)$" end t))
                  (setq impend (match-end 0))
                  (setq modlist (append modlist (mapcar 's-trim (s-split "," (match-string 1))))))
                (setq modlist (sort modlist 's-less?))
                (setq modlist (mapcar (lambda (x) (concat "import " x)) modlist))
                (setq bigstr (s-join "\n" modlist))
                (save-restriction
                  (narrow-to-region impstart impend)
                  (delete-region impstart impend)
                  (goto-char impstart)
                  (insert bigstr)))))))
      (if debug-init-msg
          (message "Mark python config"))
      ))
#+end_src
**** Pymacs
#+begin_src emacs-lisp :tangle yes
  (req-package pymacs
    :commands (pymacs-apply pymacs-call pymacs-eval pymacs-exec pymacs-load)
    :config
    (progn
      (if debug-init-msg
          (message "Mark pre pymacs config"))
      (add-to-list 'pymacs-load-path (concat user-emacs-directory "pymacs-dir"))

      (defun fp-maybe-pymacs-reload ()
        (let ((buffer-directory (file-name-directory buffer-file-name)))
          (dolist (pymacsdir pymacs-load-path)
            (setq pymacsdir (expand-file-name pymacsdir))
            (when (and (string-equal (file-name-directory buffer-file-name)
                                     pymacsdir)
                       (string-match-p "\\.py\\'" buffer-file-name))
              (pymacs-load (substring buffer-file-name 0 -3))))))
      (add-hook 'after-save-hook 'fp-maybe-pymacs-reload)

      ;; Rope emacs slows saves down incredibly so don't use it
      (setq ropemacs-guess-project t)
      (setq ropemacs-enable-autoimport t)

       ;; (if athome
       ;;     (progn
       ;;       (add-hook 'before-save-hook
       ;;                 (function (lambda ()
       ;;                                    ; get time and print message
       ;;                             (message (concat "exit before-save-hook"
       ;;                                              (current-time-string))))))
       ;;       (add-hook 'after-save-hook
       ;;                 (function (lambda ()
       ;;                                    ; get time and print message
       ;;                             (message (concat "exit after-save-hook"
       ;;                                              (current-time-string))))))
       ;;       ;;(pymacs-load "ropemacs" "rope-")
       ;;       )

       ;;   (add-hook 'before-save-hook
       ;;             (function (lambda ()
       ;;                                    ; get time and print message
       ;;                         (message (concat "enter before-save-hook"
       ;;                                          (current-time-string))))))
       ;;   (add-hook 'after-save-hook
       ;;             (function (lambda ()
       ;;                                    ; get time and print message
       ;;                         (message (concat "enter after-save-hook"
       ;;                                          (current-time-string))))))
       ;;   ;;(pymacs-load "ropemacs" "rope-")
       ;;  )
      (if debug-init-msg
          (message "Mark post pymacs config"))
      )
    )
#+end_src

*** Task Juggler
#+begin_src emacs-lisp :tangle yes
  (req-package taskjuggler-mode
    :commands taskjuggler-mode
    :mode "\\.tjp\\'")
  (if debug-init-msg
      (message "Mark post taskjuggler"))
#+end_src

*** Org-Mode
#+begin_src emacs-lisp :tangle yes
  (if debug-init-msg
      (message "Mark pre org mode"))

  (req-package org-mac-link
    :commands org-mac-grab-link
    :init
    (progn
      (if debug-init-msg
          (message "Mark post org-mac-link init")))
    :config
    (progn
      (if debug-init-msg
          (message "Mark post org-mac-link config")))
   )

  ;; (require s)
  (defvar ietf-doc-directory "~/Dropbox/IETF/doc-cache/")
  (defvar ietf-draft-url-directory "http://www.ietf.org/id/")
  (defvar ietf-rfc-url-directory "http://www.ietf.org/rfc/")
  (defun ietf-doc-fetch-to-cache ()
    (interactive)
    (let* ((found (thing-at-point 'filename))
           (pathname (concat ietf-doc-directory found))
           (dirname (file-name-directory pathname))
           (filename (concat (file-name-sans-extension (file-name-base pathname))
                             ".txt"))
           (url (concat ietf-draft-url-directory filename)))
      (setq pathname (concat dirname filename))
      (if (file-exists-p pathname)
          (message "Already have %s" pathname)
        (make-directory dirname t)
        (url-copy-file url pathname t)
        (message "Downloaded %s to %s" url pathname)
      )))

  (load-library "org-plus-contrib-autoloads")

  (req-package org-magit
    :commands (org-magit-open org-magit-export org-magit-store-link))

  (req-package org-crypt
    :commands (org-encrypt-entries org-decrypt-entries
               org-encrypt-entry org-decrypt-entry
               org-crypt-use-before-save-magic))

  (req-package org
    :commands (org-mode org-capture)
    :interpreter ("org" . org-mode)
    :mode ("\\.org\\'" . org-mode)
    :bind ("C-c c" . org-capture)
    :init
    (progn
      (defun my-org-mode-hook ()
        (if debug-init-msg
            (message "Org-mode-hook"))
        (org-set-local 'yas/trigger-key [tab])
        (yas-minor-mode)
        (turn-on-flyspell)
        (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)
        (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)
        (define-key org-mode-map (kbd "C-c e e") 'org-encrypt-entries)
        (define-key org-mode-map (kbd "C-c e E") 'org-encrypt-entry)
        (define-key org-mode-map (kbd "C-c e d") 'org-decrypt-entries)
        (define-key org-mode-map (kbd "C-c e D") 'org-decrypt-entry)
        (setq org-tags-exclude-from-inheritance '("crypt"))
        (setq org-crypt-disable-auto-save t)
        (setq org-crypt-key "D7B83025"))
        ;; (and (buffer-file-name)
        ;;      (string-match "\\.o2b$" (buffer-file-name))
        ;;      (org2blog/wp-mode)))
        
      (define-key global-map (kbd "C-c a") 'org-agenda)
      (define-key global-map (kbd "C-c c") 'org-capture)
      (define-key global-map (kbd "C-c l") 'org-store-link)
      (add-hook 'org-mode-hook 'my-org-mode-hook)
      ;; (require 'org-latex)

      (setq org-directory "~/org-mode")
      (setq org-src-fontify-natively t)
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq org-agenda-start-on-weekday 5)
      ;; (setq org-agenda-start-day "-8d")
      )

    :config
    (progn
      (if debug-init-msg
          (message "org-mode after load"))
      (org-crypt-use-before-save-magic)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t) (dot . t))
       )

      (eval-after-load "org"
        '(mapc
          (lambda (face)
            (set-face-attribute
             face nil
             :inherit
             (my-adjoin-to-list-or-symbol
              'fixed-pitch
              (face-attribute face :inherit))))
          (list 'org-code 'org-block 'org-table 'org-block-background)))

      ;; (add-to-list 'org-modules 'org-mac-message)
      ;; (setq org-mac-mail-account "Work")

      ;; - Vi friendly bindings replacing cursor movement with meta-{hjkl}
      (bind-key "M-h" 'org-metaleft org-mode-map)
      (bind-key "M-l" 'org-metaright org-mode-map)
      (bind-key "M-k" 'org-metaup org-mode-map)
      (bind-key "M-j" 'org-metadown org-mode-map)
      (bind-key "M-H" 'org-shiftmetaleft org-mode-map)
      (bind-key "M-L" 'org-shiftmetaright org-mode-map)
      (bind-key "M-K" 'org-shiftmetaup org-mode-map)
      (bind-key "M-J" 'org-shiftmetadown org-mode-map)

      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline (concat org-directory "/notes.org") "Tasks")
               "* TODO %?\n%T\n%a\n")

              ("m" "Mail Todo" entry (file+headline (concat org-directory "/notes.org") "Mail")
               "* TODO %?\n%T\n%(org-mac-message-get-links \"s\")\n")

              ("l" "Link Note" entry (file+headline (concat org-directory "/notes.org") "Notes")
               "* NOTE %?\n%T\n%(org-mac-safari-get-frontmost-url)\n")

              ("n" "Generic Note" entry (file+datetree (concat org-directory "/notes.org") "Notes")
               "* NOTE %?\n%T\nannotation:%a\nx:%x\n")

              ("s" "Status" entry (file+datetree (concat org-directory "/status.org"))
               "* NOTE %?\n%T\n")

              ("i" "IETF related")
              ("im" "IETF Todo w/ Mail" entry (file+headline (concat org-directory "/notes.org") "IETF")
               "* TODO %?\n%T\n%(org-mac-message-get-links \"s\")\n")
              ("il" "IETF Note w/ Link " entry (file+headline (concat org-directory "/notes.org") "IETF")
               "* NOTE %?\n%T\n%(org-mac-safari-get-frontmost-url)\n")
              ("in" "IETF Note" entry (file+datetree (concat org-directory "/notes.org") "IETF")
               "* NOTE %?\n%T\nannotation:%a\nx:%x\n")
              ("it" "IETF Todo" entry (file+headline (concat org-directory "/notes.org") "IETF")
               "* TODO %?\n%T\nannotation:%a\n")

              ("T" "Terastream related")
              ("Tm" "Terastram Todo with Mail" entry (file+headline (concat org-directory "/notes.org") "Terastream")
               "* TODO %?\n%T\n%(org-mac-message-get-links \"s\")\n")
              ("Tl" "Terastram Link Note" entry (file+headline (concat org-directory "/notes.org") "Terastream")
               "* NOTE %?\n%T\n%(org-mac-safari-get-frontmost-url)\n")
              ("Tt" "Terastream Todo" entry (file+headline (concat org-directory "/notes.org") "Terastream")
               "* TODO %?\n%T\n")
              )
            )
      )
    )
#+end_src

*** Blogging
#+begin_src emacs-lisp :tangle yes
  (if debug-init-msg
      (message "Mark pre org2blog mode"))
  (req-package org2blog
    :require (metaweblog netrc)
    :interpreter ("org2blog" . org2blog/wp-mode)
    :mode ("\\.o2b\\'" . org2blog/wp-mode)
    :commands org2blog/wp-mode
    :init
    (progn
      (setq blog (netrc-machine (netrc-parse "~/.netrc") "hoppsjots.org" t))
      (setq org2blog/wp-use-sourcecode-shortcode t)
      (setq org2blog/wp-blog-alist
            '(("wordpress"
               :url "http://chopps.wordpress.com/xmlrpc.php"
               :username "chopps"
               :default-title "Hello World"
               :default-categories ("org2blog" "emacs")
               :tags-as-categories nil)
              ("hoppsjots.org"
               :url "http://hoppsjots.org/xmlrpc.php"
               :default-categories ("Development" "Emacs")
               :username (netrc-get blog "login")
               :password (netrc-get blog "password"))))
      )
    :config
    (progn
      (defadvice org-wp-src-block (after ad-org-wp-src-block activate)
        "Always use space as title if none given"
        (setq ad-return-value (replace-regexp-in-string "title=\"\"" "title=\" \"" ad-return-value)))
      (ad-activate 'org-wp-src-block)
      (add-to-list 'org2blog/wp-sourcecode-langs "lisp")
      (add-to-list 'org2blog/wp-sourcecode-langs "sh")
      (add-hook 'org2blog/wp-mode-hook 'org-mode)
      ))
#+end_src

*** Spelling
#+begin_src emacs-lisp :tangle yes
  (if debug-init-msg
      (message "Mark pre spelling"))
  (define-key ctl-x-map (kbd "C-i") 'endless/ispell-word-then-abbrev)

  (defun endless/ispell-word-then-abbrev (p)
    "Call `ispell-word'. Then create an abbrev for the correction made. With prefix P, create local abbrev. Otherwise it will be global."
    (interactive "P")
    (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
      (call-interactively 'ispell-word)
      (setq aft (downcase (or (thing-at-point 'word) "")))
      (unless (string= aft bef)
        (message "\"%s\" now expands to \"%s\" %sally"
                 bef aft (if p "loc" "glob"))
        (define-abbrev
          (if p global-abbrev-table local-abbrev-table)
          bef aft))))

  (setq save-abbrevs t)
  (setq-default abbrev-mode t)

  (setq flyspell-issue-message-flag nil)
#+end_src

*** Completion
**** Helm
#+BEGIN_SRC emacs-lisp :tangle yes
  (req-package helm
    :require (helm-config helm-projectile projectile)
    :init
    (progn
      (if debug-init-msg
          (message "Mark pre helm mode"))
      (setq helm-c-locate-command
            (case system-type
              ('gnu/linux "locate -i -r %s")
              ('berkeley-unix "locate -i %s")
              ('windows-nt "es %s")
              ('darwin "mdfind -name %s %s")
              (t "locate %s"))
            )
      (helm-mode 1)

      ;; from http://tuhdo.github.io/helm-intro.html
      (global-set-key (kbd "C-c h") 'helm-command-prefix)
      (global-unset-key (kbd "C-x c"))
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
      (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
      (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
            helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
            helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
            helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
            helm-ff-file-name-history-use-recentf t)
      ;; End

      ;; Helm Keybindings
      (define-key global-map [remap find-file] 'helm-find-files)
      (define-key global-map [remap occur] 'helm-occur)
      (define-key global-map [remap list-buffers] 'helm-buffers-list)
      (define-key global-map [remap switch-to-buffer] 'helm-buffers-list)
      (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)

      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)
      (global-set-key (kbd "C-c h !") 'helm-calcul-expression)
      (global-set-key (kbd "C-c h :") 'helm-eval-expression-with-eldoc)
      (global-set-key (kbd "C-c h o") 'helm-occur)
      (global-set-key (kbd "C-x b") 'helm-mini) ; Override list-buffers to buffers or recent files

      (unless (boundp 'completion-in-region-function)
        (define-key lisp-interaction-mode-map [remap completion-at-point] 'helm-lisp-completion-at-point)
        (define-key emacs-lisp-mode-map       [remap completion-at-point] 'helm-lisp-completion-at-point))

      ;; Helm settings
      (setq helm-M-x-fuzzy-match t
            helm-apropos-fuzzy-match t
            helm-buffers-fuzzy-matching t
            helm-recentf-fuzzy-match t
            )

      ;; Helm window
      (setq helm-display-header-line nil)
      (defun helm-toggle-header-line ()
        (if (= (length helm-sources) 1)
              (set-face-attribute 'helm-source-header nil :height 0.1)
                  (set-face-attribute 'helm-source-header nil :height 1.0)))
      (add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)

      (helm-autoresize-mode 1)
      (setq helm-autoresize-max-height 30
            helm-autoresize-min-height 30
            helm-split-window-in-side-p t)

      ;; (setq helm-projectile-sources-list (cons 'helm-source-projectile-files-list
      ;;                                         (remove 'helm-source-projectile-files-list
      ;;                                                  helm-projectile-sources-list)))
      (helm-projectile-on)
      (if debug-init-msg
          (message "Mark post helm mode"))
      ))
#+END_SRC

**** Auto Complete
#+begin_src emacs-lisp :tangle yes
  (if (boundp 'viper-harness-minor-mode)
      (progn
        (viper-harness-minor-mode "auto-complete")
        ;; XX (viper-harness-minor-mode "auto-complete-extension")
        (viper-harness-minor-mode "auto-complete-config")))

  (require 'auto-complete-config)

  ; XXX (require 'auto-complete-extension)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
  (ac-config-default)

  (defun ac-python-mode-setup ()
    (setq ac-sources (append '(ac-source-yasnippet ac-source-gtags) ac-sources)))
  (add-hook 'python-mode-hook 'ac-python-mode-setup)


  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)

  (setq ac-auto-start nil)        ; don't run ac-complete continuously
  (setq ac-trigger-key "TAB")     ; do start auto-complete when a tab is encountered
  (setq ac-trigger-commands '(chopps-python-tab)) ; when entered enables completion
  (define-key ac-menu-map "\C-n" 'ac-next)
  (define-key ac-menu-map "\C-p" 'ac-previous)
  (define-key ac-menu-map "\e" 'ac-complete)


  (setq ac-trigger-commands-on-completing
        (cons 'viper-intercept-ESC-key ac-trigger-commands-on-completing))

#+end_src
**** File and Buffer Completion (ido)
;;----------------------------+
;; File and buffer completion
;;----------------------------+

#+begin_src emacs-lisp :tangle no
  (req-package ido-ubiquitous
    :init
    (progn
      ;; ido mode
      (ido-mode +1)
      ;; ido almost everywhere
      (ido-ubiquitous-mode +1)
      ;; smarter fuzzy matching for ido
      (flx-ido-mode +1)
      ;; disable ido faces to see flx highlights
      (setq ido-use-faces nil)))

  (req-package smex
    :init
    (progn
      ;; remember recently and most frequently used commands
      ;; (setq-smex-save-fil (expand-file-name ".smex-items"))
      (smex-initialize)
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands)))

#+end_src

**** Yasnippet
#+begin_src emacs-lisp :tangle yes
  (req-package yasnippet
    :init
    (progn
      (if debug-init-msg
        (message "yasnippet loading"))
      ;; (setq yas/trigger-key (kbd "C-c <kp-multiply>"))
      ;; (setq yas/trigger-key (kbd "C-c C-q"))
      (setq yas/trigger-key (kbd "C-c C-]"))
      ;;     ;(setq yas/root-directory "~/.emacs.d/snippets")
      ;;     (setq yas/snippet-dirs '("~/.emacs.d/snippets"))
      ;;     ;(yas/initialize)
      ;;     ;(yas/load-directory yas/root-directory)

      ;; Don't map TAB to yasnippet
      ;; In fact, set it to something we'll never use because
      ;; we'll only ever trigger it indirectly.

      (add-hook 'yas/after-exit-snippet-hook
                (lambda () (setq ac-trigger-key nil)))
      (add-hook 'yas/before-expand-snippet-hook
                (lambda () (setq ac-trigger-key "TAB")))
      (if debug-init-msg
        (message "yasnippet loaded")))
    :config
    (yas-reload-all))
  ;;     (yas/global-mode 1)))
#+end_src

**** Headers
    #+begin_src emacs-lisp :tangle yes
      (defun user-full-name ()
        "Christian Hopps")

      (defun my-get-date ()
        (concat (format-time-string "%B" (current-time))
                " "
                (trim-string (format-time-string " %e" (current-time)))
                (format-time-string " %Y" (current-time))))
      (setq work-ai-prefix "/.*/\\(?:Documents/Work\\|chopps/w\\)/.*/")

      (eval-after-load 'autoinsert
        '(progn

           ;;-----------+
           ;;      Home
           ;;-----------+

           (define-auto-insert
             '("\\.org\\'" . "Home Org mode skeleton")
             '("Short description: "
               "#+TITLE: " _ \n
               > "#+AUTHOR: Christian E. Hopps" \n
               > "#+EMAIL: chopps@gmail.com" \n
               > "#+STARTUP: indent" \n
               > "" \n
               ))
           (define-auto-insert
             '("\\.o2b\\'" . "Home Blog Org mode skeleton")
             '("Short description: "
               "#+TITLE: " _ \n
               > "#+BLOG: hoppsjots.org" \n
               > "#+AUTHOR: Christian E. Hopps" \n
               > "#+EMAIL: chopps@gmail.com" \n
               > "#+CATEGORY: Development" _ \n
               > "#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil" \n
               > "#+STARTUP: indent" \n
               > "" \n
               ))
           (define-auto-insert
             '("\\.el\\'" . "Home Lisp comment skeleton")
             '("Short description: "
               ";;" \n
               > ";; " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > ";;" \n
               > ";; Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps" \n
               > ";; All rights reserved." \n
               > ";;" \n
               > _ ))
           (define-auto-insert
             '("\\.py\\'" . "# Home python comment skeleton")
             '("Short description: "
               "# -*- coding: utf-8 -*-"
               > "#" \n
               > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "#" \n
               > "# Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
               > "# All rights reserved." \n
               > "#" \n
               > "# REDISTRIBUTION IN ANY FORM PROHIBITED WITHOUT PRIOR WRITTEN" \n
               > "# CONSENT OF THE AUTHOR." \n
               > "from __future__ import absolute_import, division, unicode_literals, print_function, nested_scopes" \n
               > "" \n
               > _ \n
               > "" \n
               > "__author__ = '" (user-full-name) "'" \n
               > "__date__ = '" (my-get-date) "'" \n
               > "__version__ = '1.0'" \n
               > "__docformat__ = \"restructuredtext en\"" \n
               > _ ))
           (define-auto-insert
             '("\\.sh\'" . "# Home shell comment skeleton")
             '("Short description: "
               "#!/bin/bash" \n
               > "#" \n
               > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "#" \n
               > "# Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
               > "# All rights reserved." \n
               > "#" \n
               > _ ))
           (define-auto-insert
             '("\\.\\(pl\\|tcl\\)" . "# Home comment skeleton")
             '("Short description: "
               "#" \n
               > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "#" \n
               > "# Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
               > "# All rights reserved." \n
               > "#" \n
               > _ ))
           (define-auto-insert
             '("\\.rst\\'" . "Home ReST skeleton")
             '("Short description: "
               ".." \n
               > ".. " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > ".." \n
               > ".. Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
               > ".. All rights reserved." \n
               > ".." \n
               > _ ))
           (define-auto-insert
             '("\\.\\(h\\|c\\|CC?\\|cc\\|cxx\\|cpp\\|c++\\|m\\)\\'" . "Home C-style skeleton")
             '("Short description: "
               "/*" \n
               > " * " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "*" \n
               > "* Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
               > "* All rights reserved." \n
               > "*" \n
               > "* REDISTRIBUTION IN ANY FORM PROHIBITED WITHOUT PRIOR WRITTEN" \n
               > "* CONSENT OF THE AUTHOR." \n
               > "*/" \n
               > _ ))


           ;;-----------+
           ;;      Work
           ;;-----------+

           (define-auto-insert
             (cons (concat work-ai-prefix "\\.org\\'") "Work org mode skeleton")
             '("Short description: "
               "#+TITLE: " _ \n
               > "#+AUTHOR: Christian E. Hopps" \n
               > "#+EMAIL: chopps@gmail.com" \n
               > "#+STARTUP: indent" \n
               > "" \n
               ))
           (define-auto-insert
             (cons (concat work-ai-prefix "\\.el\\'") "Work Lisp comment skeleton")
             '("Short description: "
               ";;" \n
               > ";; " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > ";;" \n
               > _
               ))
           (define-auto-insert
             (cons (concat work-ai-prefix "\\.py\\'") "# Work python comment skeleton")
             '("Short description: "
               "# -*- coding: utf-8 -*-"
               > "#" \n
               > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "#" \n
               > "from __future__ import absolute_import, division, unicode_literals, print_function, nested_scopes" \n
               > _ \n
               > "__author__ = '" (user-full-name) "'" \n
               > "__date__ = '" (my-get-date) "'" \n
               > "__version__ = '1.0'" \n
               > "__docformat__ = \"restructuredtext en\"" \n
               ))
           (define-auto-insert
             (cons (concat work-ai-prefix "\\.sh\\'") "# Work comment skeleton")
             '("Short description: "
               "#!/bin/bash" \n
               > "#" \n
               > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "#" \n
               > _ ))
           (define-auto-insert
             (cons (concat work-ai-prefix "\\.\\(pl\\|tcl\\)\\'") "# Work comment skeleton")
             '("Short description: "
               "#" \n
               > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "#" \n
               > _ ))
           (define-auto-insert
             (cons (concat work-ai-prefix "\\.rst\\'") "Work ReST skeleton")
             '("Short description: "
               ".." \n
               > ".. " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > ".." \n
               > _ ))
           (define-auto-insert
             (cons (concat work-ai-prefix "\\.\\(h\\|c\\|CC?\\|cc\\|cxx\\|cpp\\|c++\\|m\\)\\'") "Work C-style skeleton")
             '("Short description: "
               "/*" \n
               > "* " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
               > "*/" \n
               > _ ))
             ))
      (auto-insert-mode)
    #+end_src
*** Keys
#+begin_src emacs-lisp :tangle yes
  (if debug-init-msg
      (message "Mark pre keys"))
  ;;(setq vc-default-back-end 'ACMEC)
  (define-key global-map "\C-xv-" 'ediff-revision)

          ;;; C-x C-k - quit.
  (define-key global-map "\C-x\C-k" 'save-buffers-kill-emacs)

          ;;; C-x C-j - goto line
  (define-key global-map "\C-x\C-j" 'goto-line)

          ;;; C-x C-m - newline
  (define-key global-map "\C-x\C-m" 'newline)

          ;;; C-m (RET) newline and indent
  (define-key global-map "\C-m" 'newline-and-indent)

          ;;; C-x \  what line
  (define-key global-map "\C-x\\" 'what-line)

          ;;; make Backspace be a delete key
                                          ;(global-set-key "\C-h" 'backward-delete-char-untabify)

  (global-set-key (kbd "C-/") 'dabbrev-expand)

  (global-set-key (kbd "M-q") 'rebox-comment)

  (global-set-key (kbd "M-Q") 'fill-paragraph)

  (define-key global-map (kbd "M-W") 'kill-region-to-ssh)
  (define-key global-map (kbd "M-Y") 'yank-from-ssh)

  (define-key global-map (kbd "C-M-h") 'help-command)

  (global-set-key (kbd "A-`") 'other-frame)

  (global-set-key [C-tab] 'other-window-or-frame)

  (global-set-key (kbd "C-\\") 'other-window-or-frame)

  ;; Find emacs source
  (global-set-key (kbd "C-h C-l") 'find-library)
  (global-set-key (kbd "C-h C-f") 'find-function)
  (global-set-key (kbd "C-h C-k") 'find-function-on-key)
  (global-set-key (kbd "C-h C-v") 'find-variable)

  ;; Font size changing
  (global-set-key (kbd "A-+") 'text-scale-increase)
  (global-set-key (kbd "A-_") 'text-scale-decrease)

  (if (getenv "ITERM")
      (defun viper-translate-all-ESC-keysequences () nil)
    (defun viper-translate-all-ESC-keysequences () t))

  (global-set-key (kbd "C-h C-m") 'discover-my-major)

  ;; Have to remove undo-tree mappings for discover to work
  ;; XXX fix (global-discover-mode 1)

  (setq guide-key/guide-key-sequence '("C-x 4" "C-c r" "C-x p"))
  ;; XXX fix (guide-key-mode 1)

  #+end_src

*** Undo
#+begin_src emacs-lisp :tangle yes
  (req-package undo-tree
    :config
    (progn
      (define-key undo-tree-map (kbd "C-x r") nil)))
#+end_src

*** Modeline
#+begin_src emacs-lisp :tangle yes
(column-number-mode t)
(setq line-number-mode t)
;; (set-face-attribute 'mode-line nil :box nil)

;; (defun chopps-after-init ()
;;   (setq sml/theme 'respectful)
;;   (sml/setup))
;; (add-hook 'after-init-hook 'chopps-after-init)
#+end_src

*** Display
#+begin_src emacs-lisp :tangle yes
(if debug-init-msg
    (message "Mark pre display mode"))
(setq x-mouse-click-focus-ignore-position t)
(setq mouse-yank-at-point t)
(display-time-mode)

(if debug-init-msg
    (message "Mark display mode 1"))
;;
;; Font-lock
;;
(setq c-font-lock-extra-types
    (quote
     ("FILE" "\\sw+_st" "\\sw+_t" "Lisp_Object" "\\sw+type" "uint" "ushort" "uchar" "boolean" "active_timer")))

(add-hook 'c-mode-hook
        (function (lambda ()
                    (font-lock-mode 1))))

(add-hook 'html-mode-hook
        (function (lambda ()
                    (font-lock-mode 1))))

(add-hook 'lisp-mode-hook
        (function (lambda ()
                    (font-lock-mode 1))))

(add-hook 'lisp-interaction-mode-hook
        (function (lambda ()
                    (font-lock-mode 1))))

(add-hook 'perl-mode-hook
        (function (lambda ()
                    (font-lock-mode 1))))

(add-hook 'python-mode-hook
        (function (lambda ()
                    (font-lock-mode 1))))
(if debug-init-msg
    (message "Mark display mode 10"))
#+end_src

*** XRUT
#+begin_src emacs-lisp :tangle yes
;; XRUT functionality
(if debug-init-msg
    (message "Mark pre xrut mode"))

;; The current launched workspace
(setq xrut-launched-workspace nil)

;; The last workspace value
(setq xrut-last-workspace nil)

;; The current launch buffer
(setq xrut-launch-buffer nil)

(setq xrut-launch-process nil)

(setq xrut-last-connect "")

(setq xrut-connect-history nil)

(defun xrut-launch-script ()
  "launch the script in the current buffer, prompt for workspace"
  (interactive)
  (let ((script-path (buffer-file-name (current-buffer)))
        dirname
        script-name
        w)
    (if (and xrut-launch-buffer (buffer-live-p xrut-launch-buffer))
        (switch-to-buffer xrut-launch-buffer)
      (setq xrut-launch-buffer nil)
      (setq dirname (read-directory-name "Workspace: " xrut-last-workspace xrut-last-workspace t nil))
      (if (not (is-workspace-root (split-string dirname "/")))
          (error "%s is not a workspace" dirname))
        (setq xrut-last-workspace dirname)
        (setq script-name (file-name-nondirectory script-path))
        (if (not xrut-launch-buffer)
            (setq xrut-launch-buffer (get-buffer-create (concat "*LAUNCH-" script-name "*"))))
        (condition-case nil
            (setq w (split-window))
          (setq w (selected-window)))
        (switch-to-buffer xrut-launch-buffer)
        (setq default-directory xrut-last-workspace)
        (insert (format "Directory: %s\nCommand: %s %s\n" default-directory script-path "--launch"))
        (setq xrut-launch-process (start-process script-name xrut-launch-buffer script-path "--launch"))
        )))

(defun xrut-connect-to-router ()
  "Connect to a router in the currently launched script"
  (interactive)
  (let (buffer cmd router-name)
    (if (not xrut-last-workspace)
        (progn
          (setq dirname (read-directory-name "Workspace: " xrut-last-workspace xrut-last-workspace t nil))
          (if (not (is-workspace-root (split-string dirname "/")))
              (error "%s is not a workspace" dirname))
          (setq xrut-last-workspace dirname)))
    (setq router-name (read-from-minibuffer "Router: " xrut-last-connect nil nil 'xrut-connect-history))
    (setq buffer (get-buffer-create (concat "*CONNECT-" router-name "*")))
    (condition-case nil
        (setq w (split-window))
      (setq w (selected-window)))
    (switch-to-buffer buffer)
    (setq default-directory xrut-last-workspace)
    (insert (format "Directory: %s\nCommand: lboot -mc %s -- exec\n" default-directory router-name ))
    (shell buffer)
    (process-send-string buffer (format "lboot -mc %s -- exec" router-name))
    ))
(if debug-init-msg
    (message "Mark post xrut mode"))
#+end_src

* End Req-Packages
#+begin_src emacs-lisp
  (if debug-init-msg
      (message "Mark pre req-package-finish"))
  (req-package-finish)
  (if debug-init-msg
      (message "Mark post req-package-finish"))
#+end_src

* Disabled
** Flymake
#+begin_src emacs-lisp :tangle no
  (defvar chopps-flymake-minor-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "M-p") 'flymake-goto-prev-error)
      (define-key map (kbd "M-n") 'flymake-goto-next-error)
      map)
    "Keymap for my flymake minor mode")
#+end_src

** Realcolor support
This is the top of my legacy init.el file.

#+begin_src emacs-lisp :tangle no
  ;; This code is from trying to get 24-bit color support working it is disabled
  ;; for now.

  ;; (set-frame-parameter nil 'tty-color-mode 16777216)
  ;; (load-library "term/tty-colors")
  (defun disabled_tty-color-values (color &optional frame)
    (let ((oldbuf (current-buffer))
          (colorval (tty-color-standard-values color)))
      (with-current-buffer (get-buffer-create "*dbg*")
        (insert (format "T Frame: %s Color: %s Colorval: %s\n" frame color colorval)))
      colorval))
  (defun disabled_xtty-color-standard-values (color &optional frame)
    (let ((oldbuf (current-buffer))
          (colorval (xw-color-values color frame)))
      (with-current-buffer (get-buffer-create "*dbg*")
        (insert (format "X Frame: %s Color: %s Colorval: %s\n" frame color colorval)))
      colorval))
#+end_src
