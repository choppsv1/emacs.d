#+TITLE: Emacs Configuration
#+AUTHOR: Christian E. Hopps
#+EMAIL: chopps@gmail.com
#+STARTUP: indent


#+NAME: Note
#+begin_src emacs-lisp
  ;;--------------------------------------------
  ;; Do not edit this file. It was tangled from
  ;; an org file.
  ;;--------------------------------------------
#+end_src

* Attributions
This file was developed by first starting with a copy from https://github.com/jhenahan/emacs.d
with help from https://github.com/daschwa/dotfiles/blob/master/emacs.d/emacs-init.org

Got some great ideas about evil mode integration from:
https://github.com/noahfrederick/dots/blob/master/emacs.d/emacs.org

Finally went back over the file using
https://github.com/noahfrederick/dots/blob/master/emacs.d/emacs.org as a guide
switching to req-package everywhere.

Thanks to those folks.

* Configuring and Installing Packages
The very first thing we do is require =req-package= as it will make sure that
packages are properly installed. Additionally we then require pallet so that our
=Cask= file is kept up to date with any installed packages.

#+begin_src emacs-lisp
  ;; Main package that loads (and installs) everything
  (require 'req-package)

  ; Pallet must be first so other auto-installed dependencies update Cask file.
  (req-package pallet)
#+end_src

* Emacs Initialization
** Use Unicode
#+begin_src emacs-lisp
  (setenv "LC_CTYPE" "UTF-8")
#+end_src

** No Frills
   #+begin_src emacs-lisp
     (dolist (mode '(global-linum-mode highlight-indentation-mode menu-bar-mode tool-bar-mode scroll-bar-mode))
       (when (fboundp mode) (funcall mode -1)))
     (setq inhibit-startup-screen t)
     (setq inhibit-startup-message t)
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

** Paths
*** Load path
#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "local-lisp"))
  (add-to-list 'load-path (concat user-emacs-directory "flymake-pyfixers"))

  ;; Our custom org2blog, should make this a custom el-get?
  (if (file-exists-p "~/Projects-Local/org2blog")
      (add-to-list 'load-path "~/Projects-Local/org2blog"))
#+end_src
*** Search path
#+begin_src emacs-lisp
  (req-package-force exec-path-from-shell
    :if (eq system-type 'darwin)
    :config
    (progn
      ;; Derive PATH by running a shell so that GUI Emacs
      ;; sessions have access to it
      (exec-path-from-shell-copy-envs '("HOSTNAME" "PATH" "PYTHONPATH"))
      (exec-path-from-shell-initialize)))
#+end_src

** Benchmarking
It’s useful to measure how long it takes Emacs to start up, so let’s show the
total time in a message:

#+begin_src emacs-lisp
  (defun nox/show-startup-time ()
    "Show Emacs's startup time in the minibuffer"
    (message "Startup time: %s seconds."
             (emacs-uptime "%s")))

  (add-hook 'emacs-startup-hook 'nox/show-startup-time 'append)
#+end_src

Benchmark-init.el can give us a breakdown of time spent on require and load
calls:

#+begin_src emacs-lisp
  (require 'benchmark-init)
  (add-hook 'after-init-hook 'benchmark-init/deactivate)
#+end_src

** Platform (Mac) Specific
For now this is specific to Mac OS X.

#+begin_src emacs-lisp
  (cond ((eq system-type 'darwin)
         ;; BSD ls does not support --dired. Use GNU core-utils:
         ;; brew install coreutils
         (when (executable-find "gls")
           (setq insert-directory-program "gls"))

         ;; Move to homedir from if in root.
         (if (string= default-directory "/")
             (cd "~"))

         ;; Point Org to LibreOffice executable
         (when (file-exists-p "/Applications/LibreOffice.app/Contents/MacOS/soffice")
           (setq org-export-odt-convert-processes
                 '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))))
#+end_src

** Start Emacs Server
The emacs server allows for using =emacsclient= to access the running emacs
without relaunching.

#+begin_src emacs-lisp
  (use-package server
    :init
    (unless (server-running-p)
      (server-start)))
#+end_src

** Temporary Files
Auto save and backup files go in /tmp.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
#+end_src

** Ctrl-Key and Shift-Key TTY Escape Mappings
   These require modifications in iterm to map the appropriate keys to the
   sequence. This is a way to pass keys that normally don't translate through a
   tty to do so. In order to implement this one needs to map the given key to an
   escape sequence as given below.

   #+begin_src emacs-lisp
     (define-key local-function-key-map (kbd "ESC \" 2 A") '[S-up])
     (define-key local-function-key-map (kbd "ESC \" 2 B") '[S-down])
     (define-key local-function-key-map (kbd "ESC \" 2 C") '[S-right])
     (define-key local-function-key-map (kbd "ESC \" 2 D") '[S-left])

     (define-key local-function-key-map (kbd "ESC \" 5 A") '[C-up])
     (define-key local-function-key-map (kbd "ESC \" 5 B") '[C-down])
     (define-key local-function-key-map (kbd "ESC \" 5 C") '[C-right])
     (define-key local-function-key-map (kbd "ESC \" 5 D") '[C-left])

     (define-key local-function-key-map (kbd "ESC \" 2 R") '[S-return])
     (define-key local-function-key-map (kbd "ESC \" 5 R") '[C-return])
     (define-key local-function-key-map (kbd "ESC \" 5 ;") '[?\C-\;])
     (define-key local-function-key-map (kbd "ESC \" 5 :") '[?\C-\:])
     (define-key local-function-key-map (kbd "ESC \" 5 ,") '[?\C-\,])
     (define-key local-function-key-map (kbd "ESC \" 5 .") '[?\C-\.])
     (define-key local-function-key-map (kbd "ESC \" 5 >") '[?\C-\>])
     (define-key local-function-key-map (kbd "ESC \" 5 <") '[?\C-\<])
     (define-key local-function-key-map (kbd "ESC \" 5 /") '[?\C-\/])
     (define-key local-function-key-map (kbd "ESC \" 5 ?") '[?\C-\?])
     (define-key local-function-key-map (kbd "ESC \" 5 \'") '[?\C-\'])
     (define-key local-function-key-map (kbd "ESC \" 5 \"") '[?\C-\"])

     (define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)
   #+end_src

** Where are we at?
   #+begin_src emacs-lisp
     (if (or (string-match "^\\(rtp\\|sjc\\|bxb\\)-chopps" (getenv "HOSTNAME"))
             (string-match "^dex" (getenv "HOSTNAME"))
             (string-match "^CHOPPS" (getenv "HOSTNAME")))
         (setq athome t)
      (setq athome nil))
   #+end_src

** El-Get

   #+begin_src emacs-lisp
     (setq el-get-verbose t)
     (add-to-list 'load-path (locate-user-emacs-file "el-get/el-get"))

     (unless (require 'el-get nil 'noerror)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
         (goto-char (point-max))
         (eval-print-last-sexp)))

     (setq el-get-github-default-url-type "https")
     ;(setq el-get-user-package-directory (concat user-emacs-directory "el-get-init-files/"))
     ;(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")

     ;; (setq old-get-private 'el-get-github-url-private)
     ;; (defun el-get-github-url-private (url-type username reponame)
     ;;  (let* ((init-string (funcall old-get-private url-type username reponame))
     ;;       (new-string (el-get-replace-string "http:" "https:" init-string)))
     ;;    (message "%s %s" init-string new-string)))

     (setq my-el-get-packages
           (append '(pylookup
                     ;; XXx xml-rpc-el
                     )))

     (el-get 'sync my-el-get-packages)

     (defun el-get-sync-recipes (overlay)
       (let* ((recipe-glob (locate-user-emacs-file (concat overlay "/recipes/*.rcp")))
              (recipe-files (file-expand-wildcards recipe-glob))
              (recipes (mapcar 'el-get-read-recipe-file recipe-files)))
         (mapcar (lambda (r) (add-to-list 'el-get-sources r)) recipes)
         (el-get 'sync (mapcar 'el-get-source-name recipes))))

       ;; EL-GET SYNC OVERLAYS
     (el-get-sync-recipes "el-get-haskell")
     (el-get-sync-recipes "el-get-user")

   #+end_src

** Recompile Local Lisp
#+begin_src emacs-lisp
  (byte-recompile-directory (expand-file-name "~/.emacs.d/local-lisp") 0)
  (if (file-exists-p (expand-file-name "~/.emacs.d/my-themes/emacs-color-theme-solarized"))
      (byte-recompile-directory (expand-file-name "~/.emacs.d/my-themes/emacs-color-theme-solarized") 0))
#+end_src

** Uniquify
#+begin_src emacs-lisp
  (req-package uniquify
    :init
    (progn
      (setq uniquify-buffer-name-style 'forward)))
#+end_src
** Custom
Locate emacs customization file.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
#+end_src

** Frames
  #+begin_src emacs-lisp
    (if athome
        (setq initial-frame-alist '((top . 50) (left . 300) (width . 250) (height . 90)))
      )
    ;; (setq initial-frame-alist '((top . 200) (left . 100) (width . 147) (height . 98)))
    ;; (setq initial-frame-alist '((top + -47) (left + -908) (width . 124) (height . 85)))
  #+end_src
** Themes
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "my-themes/"))
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "my-themes/emacs-color-theme-solarized"))

  (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┇))

  ;; (req-package-force solarized-theme)
  (req-package-force zenburn-theme)

  (if (display-graphic-p)
      (load-theme 'zenburn t)

    (setq current-theme nil)
    (defun get-detroit-hour ()
      (string-to-number (shell-command-to-string "TZ=America/Detroit date +%k")))

    (defun synchronize-theme  ()
      (interactive)
      (if (member (get-detroit-hour) (number-sequence 9 20))
          (setq now 'zenburn)
        (setq now 'solarized-dark))
      (if (not (eq now current-theme))
          (progn
            (load-theme now)
            (setq current-theme now))))

    (run-with-timer 0 600 'synchronize-theme))

  ;; (require 'centered-window-mode)
  ;; (centered-window-mode t)

  (req-package zenburn-theme)

  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "my-themes/"))

  ;; (setq sml/theme 'respectful)
  ;; (sml/setup)

  (setq current-theme nil)

  (defun get-detroit-hour ()
    (string-to-number (shell-command-to-string "TZ=America/Detroit date +%k")))

  (defun synchronize-theme  ()
    (interactive)
    (if (member (get-detroit-hour) (number-sequence 9 20))
                (setq now 'zenburn)
              (setq now 'solarized-dark))
    (if (not (eq now current-theme))
        (progn
          (load-theme now)
          (setq current-theme now))))

  (run-with-timer 0 600 'synchronize-theme)

  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┃))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?╏))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┆))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┊))
  ;; (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?┋))

  ;; (if (display-graphic-p)
  ;;    (progn
  ;;      (load-theme 'my-flatui)
  ;;      (setq current-theme 'my-flatui)
  ;;      (defun synchronize-theme  ()
  ;;         (interactive)
  ;;         (setq hour (string-to-number 
  ;;                     (substring (current-time-string) 11 13)))
  ;;         (if (member hour (number-sequence 6 21))
  ;;             (setq now 'my-flatui)
  ;;           (setq now 'chopps))
  ;;         (if (not (eq now current-theme))
  ;;             (load-theme now)))
  ;;
  ;;      (run-with-timer 0 3600 'synchronize-theme))
  ;;  (load-theme 'chopps))
#+end_src

** Evil
#+begin_src emacs-lisp
  (req-package-force evil
    ;;:require (evil-args evil-nerd-commenter evil-terminal-cursor-changer)
    ;;:require (evil-args evil-nerd-commenter)
    :init
    (progn
      (setq evil-search-wrap nil)
      (setq evil-want-C-i-jump nil)

      ;; (setq evil-esc-delay 0)
      (setq evil-esc-delay 0.001)


      ;; (setq evil-default-cursor t)
      ;; (setq evil-emacs-state-cursor  '("red" box))
      ;; (setq evil-normal-state-cursor '("gray" box))
      ;; (setq evil-visual-state-cursor '("gray" box))
      ;; (setq evil-insert-state-cursor '("gray" bar))
      ;; (setq evil-motion-state-cursor '("gray" box))

      (setq evil-emacs-state-cursor 'hbar)
      (setq evil-normal-state-cursor 'box)
      (setq evil-visual-state-cursor 'box)
      (setq evil-insert-state-cursor 'bar)
      (setq evil-motion-state-cursor nil)

      (defun evil-undefine ()
        (interactive)
        (let (evil-mode-map-alist)
          (call-interactively (key-binding (this-command-keys)))))
      )
    :config
    (progn
      (evil-change-to-initial-state)

      (require 'evil-args)
      (require 'evil-nerd-commenter)
      (require 'evil-terminal-cursor-changer)

      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key evil-normal-state-map (kbd "TAB") 'evil-undefine)
      ;; (define-key evil-normal-state-map (kbd "RET") 'evil-undefine)
      ;; (define-key evil-normal-state-map " " 'evil-undefine)

      ;; Undefine vi keys in all modes.
      (let ((undef '("\C-a" "\C-e" "\C-n" "\C-p")))
        (while undef
          (define-key evil-normal-state-map (car undef) 'evil-undefine)
          (define-key evil-visual-state-map (car undef) 'evil-undefine)
          (define-key evil-insert-state-map (car undef) 'evil-undefine)
          (setq undef (cdr undef))))

      ;; Undefine vi keys in insert mode.
      (let ((undef '("\C-k")))
        (while undef
          (define-key evil-insert-state-map (car undef) 'evil-undefine)
          (setq undef (cdr undef))))

      ;; Remove RET and SPC from motion map so they can be overridden by various modes
      (defun my-move-key (keymap-from keymap-to key)
        "Moves key binding from one keymap to another, deleting from the old location. "
        (define-key keymap-to key (lookup-key keymap-from key))
        (define-key keymap-from key nil))
      (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
      (my-move-key evil-motion-state-map evil-normal-state-map " ")

      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
      ))
  (evil-mode 1)
#+end_src

** VCS
  #+begin_src emacs-lisp
    (req-package magit)
    (autoload 'svn-status "dsvn" "Run `svn status'." t)
    (autoload 'svn-update "dsvn" "Run `svn update'." t)
    (require 'vc-svn)

  #+end_src
** Text Mode

  #+begin_src emacs-lisp
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
    (add-hook 'text-mode-hook 'turn-on-flyspell)
    (add-hook 'rst-mode-hook (lambda ()
                               (define-key mode-specific-map "0" 'rst-adjust)
                               (setq fill-column 79)
                               ))
    (setq default-fill-column 80)

    (add-to-list 'auto-mode-alist '("diff" . diff-mode))
    (add-to-list 'auto-mode-alist '("\\.diff\\'" . diff-mode))

    (eval-after-load "text-mode"
      '(progn
         (modify-syntax-entry ?_ "w" text-mode-syntax-table)
         (modify-syntax-entry ?- "w" text-mode-syntax-table)
         ))
  #+end_src

** Buffer Handling
  #+begin_src emacs-lisp
    ;; (iswitchb-mode 1)
    ;; (setq iswitchb-buffer-ignore '("^ " "^\\*"))
    (setq iswitchb-buffer-ignore '("^ "))
    (setq-default save-place t)

    (defun dont-kill-but-bury-scratch ()
      "Don't kill but burry *scratch* buffer."
      (if (equal (buffer-name (current-buffer)) "*scratch*")
          (progn (bury-buffer) nil)
        t))
    (add-hook 'kill-buffer-query-functions 'dont-kill-but-bury-scratch)
  #+end_src

** Cleanup Buffers Automatically
   #+begin_src emacs-lisp
     (require 'midnight)

     ;;kill buffers if they were last disabled more than this seconds ago (30m)
     (setq clean-buffer-list-delay-special 1800)

     (defvar clean-buffer-list-timer nil
       "Stores clean-buffer-list timer if there is one. You can disable clean-buffer-list by (cancel-timer clean-buffer-list-timer).")
     ;; run clean-buffer-list every 2 hours
     (setq clean-buffer-list-timer (run-at-time t 7200 'clean-buffer-list))

     ;; kill everything, clean-buffer-list is very intelligent at not killing unsaved buffer.
     (setq clean-buffer-list-kill-regexps '("^.*$"))

     ;; keep these buffer untouched
     ;; prevent append multiple times
     (defvar clean-buffer-list-kill-never-buffer-names-init
       clean-buffer-list-kill-never-buffer-names
       "Init value for clean-buffer-list-kill-never-buffer-names")

     (setq clean-buffer-list-kill-never-buffer-names
           (append
            '("*Messages*" "*cmd*" "*scratch*" "*w3m*" "*w3m-cache*" "*Inferior Octave*" "status.org" "notes.org")
            clean-buffer-list-kill-never-buffer-names-init))

     ;; prevent append multiple times
     (defvar clean-buffer-list-kill-never-regexps-init
       clean-buffer-list-kill-never-regexps
       "Init value for clean-buffer-list-kill-never-regexps")

     ;; append to *-init instead of itself
     (setq clean-buffer-list-kill-never-regexps
           (append '("^\\*EMMS Playlist\\*.*$")
                   clean-buffer-list-kill-never-regexps-init))
   #+end_src

** Windows
  #+begin_src emacs-lisp
    (setq wg-morph-on nil)
    (setq wg-prefix-key (kbd "C-c w"))
    ;; (require 'workgroups)
    ;; (workgroups-mode 1)
    ;; (if (file-exists-p "~/.emacs-workgroups")
    ;;     (wg-load "~/.emacs-workgroups"))

    (defun other-window-or-frame ()
      (interactive)
      (other-window 1 'visible)
      (select-frame-set-input-focus (window-frame (selected-window))))


    (defun split-window-sensibly-prefer-horizontal (&optional window)
    "Same as `split-window-sensibly' except prefer to split horizontally first."
      (let ((window (or window (selected-window))))
        (or (and (window-splittable-p window t)
                 ;; Split window horizontally.
                 (with-selected-window window
                   (split-window-right)))
            (and (window-splittable-p window)
                 ;; Split window vertically.
                 (with-selected-window window
                   (split-window-below)))
            (and (eq window (frame-root-window (window-frame window)))
                 (not (window-minibuffer-p window))
                 ;; If WINDOW is the only window on its frame and is not the
                 ;; minibuffer window, try to split it vertically disregarding
                 ;; the value of `split-height-threshold'.
                 (let ((split-height-threshold 0))
                   (when (window-splittable-p window)
                     (with-selected-window window
                       (split-window-below))))))))

    (setq split-width-threshold 160)
    (setq window-min-width 80)
    (setq split-window-preferred-function 'split-window-sensibly-prefer-horizontal)
  #+end_src

** Shell Mode

  #+begin_src emacs-lisp
    (add-hook 'shell-mode-hook
              (function (lambda ()
                          (flyspell-prog-mode)
                          (local-set-key "\M-p" 'comint-previous-input)
                          (local-set-key "\M-n" 'comint-next-input))))


    (require 'shell-switcher)
    (shell-switcher-mode t)
  #+end_src
** Mac

  #+begin_src emacs-lisp
    (unwind-protect
     (condition-case ex
          (pc-selection-mode)
      (`error
        t)))
    (global-set-key [?\A-x] 'clipboard-kill-region)
    (global-set-key [?\A-c] 'clipboard-kill-ring-save)
    (global-set-key [?\A-v] 'clipboard-yank)
  #+end_src
** Comint

  #+begin_src emacs-lisp
    (eval-after-load "comint"
      '(progn
         (define-key comint-mode-map [(meta p)]
           'comint-previous-matching-input-from-input)
         (define-key comint-mode-map [(meta n)]
           'comint-next-matching-input-from-input)
         (define-key comint-mode-map [(control meta n)]
           'comint-next-input)
         (define-key comint-mode-map [(control meta p)]
           'comint-previous-input)
         (setq comint-completion-autolist t ;list possibilities on partial
                                            ;completion
           comint-completion-recexact nil   ;use shortest compl. if
                                            ;characters cannot be added
           ;; how many history items are stored in comint-buffers (e.g. py- shell)
           ;; use the HISTSIZE environment variable that shells use (if avail.)
           ;; (default is 32)
           comint-input-ring-size (string-to-number (or (getenv "HISTSIZE") "100")))))
  #+end_src
** Generic Lisp
  #+begin_src emacs-lisp
    (require 's)

    (defun remove-last-elt (list)
      (let ((rlist (reverse list)))
        (reverse (cdr rlist))))

    (defun trim-string (string)
      "Remove white spaces in beginning and ending of STRING.
    White space here is any of: space, tab, emacs newline (line feed, ASCII 10)."
      (replace-regexp-in-string "\\`[ \t\n]*" "" (replace-regexp-in-string "[ \t\n]*\\'" "" string)))

    ;;-------------------------------
    ;; Disabled commands (not many)
    ;;-------------------------------

    (defun enable-all-commands ()
      "Enable all commands, reporting on which were disabled."
      (interactive)
      (with-output-to-temp-buffer "*Commands that were disabled*"
        (mapatoms
         (function
          (lambda (symbol)
            (when (get symbol 'disabled)
              (put symbol 'disabled nil)
              (prin1 symbol)
              (princ "\n")))))))

    (defun increment-numbers-in-rergion ()
      "Find all numbers in the region and increment them by 1."
      (interactive)
      (if (not (use-region-p))
          (error "No region defined"))
      (let* ((start (region-beginning))
             (end (region-end))
             found)
        (save-excursion
          (goto-char start)
          (while (setq found (re-search-forward "[0-9]+" end t))
            (replace-match (number-to-string (+ (string-to-number (match-string 0)) 1)))))))

    (defun normalize-numbers-in-rergion ()
      "Find all numbers in the region starting with 0 set them increasing order"
      (interactive)
      (if (not (use-region-p))
          (error "No region defined"))
      (let* ((start (region-beginning))
             (end (region-end))
             (value 0)
             found)
        (save-excursion
          (goto-char start)
          (while (setq found (re-search-forward "\\<[0-9]+\\>" end t))
            (replace-match (number-to-string value))
            (setq value (+ value 1))))))


    ; Automatically enable any disabled command the first time it's used.
    (defun enable-this-command (&rest args)
      (put this-command 'disabled nil)
      (call-interactively this-command))
    (setq disabled-command-function 'enable-this-command)

    (defun strip-trailing-whitespace ()
      "Eliminate whitespace at ends of lines."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "[ \t][ \t]*$" nil t)
          (delete-region (match-beginning 0) (point)))))

    ;; (defun nuke-nroff-bs ()
    ;;   (interactive)
    ;;   (let ((old-modified (buffer-modified-p))
    ;;         (old-point (point)))
    ;;     (call-interactively (beginning-of-buffer))
    ;;     (replace-regexp "\\(.\\)^H\\1^H\\1^H\\1" "\\1")
    ;;     (call-interactively (beginning-of-buffer))
    ;;     (replace-regexp "\\(.\\)^H\\1^H\\1" "\\1")
    ;;     (call-interactively (beginning-of-buffer))
    ;;     (replace-regexp "\\(.\\)^H\\1" "\\1")
    ;;     (call-interactively (beginning-of-buffer))
    ;;     (replace-string "_^H" "")
    ;;     (set-buffer-modified-p old-modified)
    ;;     (goto-char old-point)))

    (defun string/starts-with (string prefix)
      "Return t if STRING starts with prefix."
      (let* ((l (length prefix)))
        (string= (substring string 0 l) prefix)))

    (defun bh-compile ()
      (interactive)
      (let ((df (directory-files "."))
            (has-proj-file nil)
            )
        (while (and df (not has-proj-file))
          (let ((fn (car df)))
            (if (> (length fn) 10)
                (if (string-equal (substring fn -10) ".xcodeproj")
                    (setq has-proj-file t)
                  )
              )
            )
          (setq df (cdr df))
          )
        (if has-proj-file
            (compile "xcodebuild -configuration Debug")
          (compile "make")
          )
        )
      )

    (defun kill-region-to-mac ()
      "Copy the region to our mac clipboard"
      (interactive)
      (shell-command-on-region (mark) (point) "ssh -q rtp-chopps-8711.cisco.com pbcopy")
      (deactivate-mark))

    (defun kill-region-to-ssh ()
      "Copy the region to our ssh clients clipboard"
      (interactive)
      (let ((cmd (concat "ssh -q " (car (split-string (getenv "SSH_CLIENT"))) " pbcopy")))
        (message "running command: %s" cmd)
        (shell-command-on-region (mark) (point) cmd))
      (deactivate-mark))

    (setq lastw-screen-window -1)
    (defun bring-screen-window-front ()
      "If running in screen tell screen to switch to our window"
      (let ((window (getenv "WINDOW"))
            (sty (getenv "STY")))
        (if sty
            (shell-command-to-string (concat "screen -X select " window)))))

    (defun return-to-last-screen-window ()
      "Return to previous screen window"
      (if (getenv "STY")
          (shell-command-to-string "screen -X other")))
    (add-hook 'server-visit-hook 'bring-screen-window-front)
    (add-hook 'server-done-hook 'return-to-last-screen-window)
    (remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)

    ;; (require 'flymake)

    (defun flymake-elisp-init ()
      (unless (string-match "^ " (buffer-name))
        (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                             'flymake-create-temp-inplace))
               (local-file  (file-relative-name
                             temp-file
                             (file-name-directory buffer-file-name))))
          (list
           (expand-file-name invocation-name invocation-directory)
           (list
            "-Q" "--batch" "--eval"
            (prin1-to-string
             (quote
              (dolist (file command-line-args-left)
                (with-temp-buffer
                  (insert-file-contents file)
                  (condition-case data
                      (scan-sexps (point-min) (point-max))
                    (scan-error
                     (goto-char(nth 2 data))
                     (princ (format "%s:%s: error: Unmatched bracket or quote\n"
                                    file (line-number-at-pos)))))))
              )
             )
            local-file)))))

    ;; (push '("\\.el$" flymake-elisp-init) flymake-allowed-file-name-masks)

    ;; (add-hook 'emacs-lisp-mode-hook
    ;;           ;; workaround for (eq buffer-file-name nil)
    ;;           (function (lambda () (if buffer-file-name (flymake-mode)))))

    (defun my-lisp-mode-hook ()
      (message "my-lisp-mode-hook")
      (flyspell-prog-mode)
      (set (make-local-variable 'rebox-style-loop) '(83 84 21))
      ;; (set (make-local-variable 'rebox-min-fill-column) 40)
      (rebox-mode 1))

    (add-hook 'lisp-mode-hook 'my-lisp-mode-hook)
    (add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)

    (defun narrow-to-python-string ()
      "Narrow to the multiline string section that contains the point"
      (interactive)
      (let (sstart
            send
            sstr
            (smatch "\\(\"\"\"\\|\'\'\'\\)"))
        (save-excursion

          (if (not (looking-at smatch))
              (re-search-backward "\\(\"\"\"\\|\'\'\'\\)"))
          (setq sstr (match-string 0))
          (setq sstart (match-end 0))
          (goto-char sstart)
          (message (format "sstart %d" sstart))
          (re-search-forward sstr)
          (setq send (match-beginning 0))
          (message (format "send %d" send)))
        (narrow-to-region sstart send)
        (message (format "narrowed to %d:%d" sstart send))
        sstart))

    (defun narrow-to-line ()
      "Narrow to the current line"
      (let (beg end)
        (save-excursion
          (move-end-of-line 1)
          (setq end (point))
          (move-beginning-of-line 1)
          (setq beg (point))
          (message (format "narrow to line %d:%d" beg end)))
        (narrow-to-region beg end)
        (values beg end)))

    (defun delete-line ()
      (interactive)
      (move-beginning-of-line 1)
      (kill-line 1))

    (defun tr-param ()
      "Translate @param to rst style - ``"
      (interactive)
      (save-excursion
        (save-restriction
          (let (beg end val indent ptype sym (tsym "") (ppos 0) (tpos 0) (npos 0)
                    (psmatch "\\(?:@\\(param\\) *\\([[:alnum:]_]+\\) *: *\\|@\\(return\\): *\\)")
                    (pmatch "\\(?:@\\(param\\) *\\([[:alnum:]_]+\\) *: *\\|@\\(return\\): *\\(.*\\)\\)"))
            ; Operate in the doc-string only.
            (narrow-to-python-string)
            (save-restriction
              (setq val (narrow-to-line))
              (setq beg (nth 0 val))
              (setq end (nth 1 val))
              (goto-char beg)
              (re-search-forward pmatch))
            (setq ptype (match-string 1))
            (if (not ptype)
                (setq ptype (match-string 3))
              (setq sym (match-string 2)))
            (setq ppos (match-beginning 0))
            (setq indent (- ppos beg)) ; indent of param
            (message (format "beginning %d indent %d" ppos indent))
                                            ; Get any type definition and remove the line
            (ignore-errors
              (save-excursion
                (if (equal ptype "param")
                    (re-search-forward (concat "@type *" sym " *: *\\(.*\\)"))
                  (re-search-forward (concat "@rtype: *\\(.*\\)")))
                (setq tpos (match-beginning 0))
                (setq tsym (match-string 1))
                (setq tsym (replace-regexp-in-string "[tT]rue or [fF]alse" "`bool`" tsym))
                (setq tsym (replace-regexp-in-string "\\<string\\>" "`str`" tsym))
                (setq tsym (replace-regexp-in-string "\\<[Bb]oolean\\>" "`bool`" tsym))
                (setq tsym (replace-regexp-in-string "\\<[Bb]ool\\>" "`bool`" tsym))
                (setq tsym (replace-regexp-in-string "\\<integer\\>" "`int`" tsym))
                (setq tsym (replace-regexp-in-string "\\<int\\>" "`int`" tsym))
                (setq tsym (replace-regexp-in-string "\\<list\\(()\\)?" "`list`" tsym))
                (setq tsym (replace-regexp-in-string "\\<dict\\(()\\)?" "`dict`" tsym))
                (setq tsym (replace-regexp-in-string "L{\\([^}]+\\)}" "`\\1`" tsym))
                (save-excursion
                  (goto-char tpos)
                  (delete-line))))
            (goto-char beg)
            (re-search-forward psmatch)
            (if (equal ptype "param")
                (replace-match (concat "  - `" sym "` (" tsym ") - "))
              (if (equal tsym "")
                  (replace-match (concat ":return: "))
                (replace-match (concat ":return: (" tsym ") "))))
            (condition-case nil
                (progn
                  (re-search-forward "@\\(param\\|return\\)" nil)
                  (point))
              (error (point-max)))))))
            ;; re-indent folloiwng lines to our - until we reach a blank line or a line
            ;; containing @ or the ned of our region

    (defun tr-all-param ()
      "Translate all paramters"
      (interactive)
      (save-excursion
        (let (send
              sstart
              (cpos (point)))
          (save-restriction
            (let (indent)
              ;; Operate in the doc-string only.
              (setq sstart (narrow-to-python-string))
              (goto-char sstart)
              (setq cpos sstart)
              (setq send (point-max))
              (message (format "pmax %d" send))
              ;; Find the first param
              (re-search-forward "^\\( +\\)@param")
              (setq indent (match-string 1))
              (replace-match (concat indent ":Parameters:\n" indent "@param"))))
          ;; now run tr-param until we are done
          (while (< cpos send)
            (setq cpos (tr-param))
            (goto-char cpos)))))

    (defun read-lines (fPath)
      "Return a list of lines of a file at FPATH."
      (with-temp-buffer
        (insert-file-contents fPath)
        (split-string (buffer-string) "\n" t)))

    (eval-after-load "elisp-mode"
      '(progn
         (modify-syntax-entry ?_ "w" emacs-lisp-mode-syntax-table)
         (modify-syntax-entry ?- "w" emacs-lisp-mode-syntax-table)
         (modify-syntax-entry ?_ "w" lisp-mode-syntax-table)
         (modify-syntax-entry ?- "w" lisp-mode-syntax-table)
         ))

    (eval-after-load "lisp-mode"
      '(progn
         (modify-syntax-entry ?_ "w" emacs-lisp-mode-syntax-table)
         (modify-syntax-entry ?- "w" emacs-lisp-mode-syntax-table)
         (modify-syntax-entry ?_ "w" lisp-mode-syntax-table)
         (modify-syntax-entry ?- "w" lisp-mode-syntax-table)
         ))
  #+end_src
** Generic Editing

  #+begin_src emacs-lisp
    (autoload 'rebox-comment "rebox2" nil t)
    (autoload 'rebox-region "rebox2" nil t)

    ;;(global-linum-mode nil)
    ;;(setq linum-format 'dynamic)
    ;;(set-face-attribute 'linum nil :background "Black"))

    ;;        (add-hook 'emacs-lisp-mode-hook (lambda ()
    ;;                                          (set (make-local-variable 'rebox-style-loop) '(25 17 21))
    ;;                                          (set (make-local-variable 'rebox-min-fill-column) 40)
    ;;                                          (rebox-mode 1)))
    ;
    (eval-after-load "rebox2"
      '(progn
         (setq max-comment-fill-column 77)
         (defadvice rebox-get-fill-column (after ad-max-comment-fill-column activate)
           "Set a maximum fill-column for comments"
           (setq ad-return-value (min ad-return-value max-comment-fill-column)))
         (ad-activate 'rebox-get-fill-column)
         (message "rebox2 loaded")
         (rebox-register-template 71 176 ["? ----------"
                                          "? box123456  "
                                          "? ----------"])

         (rebox-register-template 72 276 ["? ----------+"
                                          "? box123456  "
                                          "? ----------+"])

         (rebox-register-template 73 376 ["? =========="
                                          "? box123456  "
                                          "? =========="])

         (rebox-register-template 74 176 ["?-----------"
                                          "? box123456 "
                                          "?-----------"])

         (rebox-register-template 75 276 ["?-----------+"
                                          "? box123456  "
                                          "?-----------+"])

         (rebox-register-template 76 376 ["?==========="
                                          "? box123456"
                                          "?==========="])

         (rebox-register-template 77 576 ["????????????"
                                          "? box123456  "
                                          "????????????"])

         (rebox-register-template 81 186 ["?? -----------"
                                          "??  box123456  "
                                          "?? -----------"])

         (rebox-register-template 82 286 ["??-----------+"
                                          "?? box123456  "
                                          "??-----------+"])

         (rebox-register-template 83 386 ["??-----------"
                                          "?? box123456  "
                                          "??-----------"])

         (rebox-register-template 84 486 ["??==========="
                                          "?? box123456  "
                                          "??==========="])
         (setq rebox-style-loop '(74 75 76 11))

         ;; (rebox-set-default-style 093)
         ;; (setq rebox-style-loop '(24 16))
         ;; Leave the defaults
         ;; (global-set-key [(meta q)] 'rebox-dwim)
         ;; (global-set-key [(shift meta q)] 'rebox-fill)
         ))



    (require 'filladapt)
    (setq-default filladapt-mode t)
  #+end_src
** URL Browsing

  #+begin_src emacs-lisp
    (eval-after-load "browse-url"
      '(progn
         (message "browse-url loaded")
         (setq browse-url-browser-function 'browse-url-generic
               browse-url-generic-program "openurl.sh")))
  #+end_src
** Acme Extension

  #+begin_src emacs-lisp
    (defun is-workspace-root (split-path)
      (let ((path (concat "/" (mapconcat 'identity split-path "/") "/.ACMEROOT")))
        (file-attributes path)))

    (defun get-workspace-root ()
      (let ((split-path (split-string (expand-file-name default-directory) "/")))
        (while (and (> (length split-path) 0)
                    (not (is-workspace-root split-path)))
          (setq split-path (remove-last-elt split-path)))
        (concat "/" (mapconcat 'identity split-path "/"))))

    ;;
    ;; XXX this needs to be updated to find the right path
    ;;
    (defun acme-ediff-latest()
     (interactive)
     (let* (
            (rel-cur-file (file-relative-name buffer-file-name))
            (acme-dir (concat  ".CC/cache/"  rel-cur-file  "@@/main/ci/fwd-33/fwd-33-mcast-intact/"))
            (version-list (directory-files acme-dir nil "[0-9]+" t))
            (latest-version (car version-list))
            (rel-base-file (concat  ".CC/cache/"  rel-cur-file  "@@/main/ci/fwd-33/fwd-33-mcast-intact/" latest-version))
            )
       (ediff-files rel-cur-file rel-base-file)))
  #+end_src

** Tagging

  #+begin_src emacs-lisp
    (req-package ggtags
      :require evil
      :commands ggtags-mode
      :mode "\\.\\(bag\\|bgen\\|cmd\\|m\\|mm\\|sch\\)\\'"
      :init
      (progn
        (defun enable-ggtags-mode () (progn (ggtags-mode 1)))
        (add-hook 'c-mode-hook      'enable-ggtags-mode)
        (add-hook 'html-mode-hook   'enable-ggtags-mode)
        (add-hook 'lisp-mode-hook   'enable-ggtags-mode)
        (add-hook 'lisp-interaction-mode-hook 'enable-ggtags-mode)
        (add-hook 'python-mode-hook 'enable-ggtags-mode)
        (add-hook 'perl-mode-hook   'enable-ggtags-mode)

        (setq ggtags-mode-prefix-key (kbd "C-c C-.")))
      :config
      (progn
        ;; (setq gtags-suggested-key-mapping t)
        ;; (setq gtags-use-old-key-map t)

        ;;; ggtags keys
        ;; (define-key ggtags-mode-map "\eh" 'gtags-display-browser)
        ;; (define-key ggtags-mode-map "\ec" 'gtags-make-complete-list)

        (define-key ggtags-mode-map (kbd "C-]") 'ggtags-find-tag-dwim)
        ;;(define-key evil-normal-state-map (kbd "C-]") 'evil-undefine)

        (define-key ggtags-mode-map (kbd "M-]") 'ggtags-find-definition)
        ;;(define-key evil-normal-state-map (kbd "C-]") 'evil-undefine)

        (define-key ggtags-mode-map (kbd "C-t") 'pop-tag-mark)
        ;;(define-key evil-normal-state-map (kbd "C-t") 'evil-undefine)

        (define-key ggtags-mode-map (kbd "M-s") 'ggtags-find-other-symbol)
        ;; (define-key evil-normal-state-map (kbd "M-s") 'evil-undefine)

        (define-key ggtags-mode-map (kbd "M-r") 'ggtags-find-reference)
        ;;(define-key evil-normal-state-map (kbd "M-r") 'evil-undefine)

        ;; (define-key ggtags-mode-map "\el" 'gtags-find-file)
        ;; (define-key ggtags-mode-map "\eg" 'gtags-find-with-grep)
        ;; (define-key ggtags-mode-map "\eI" 'gtags-find-with-idutils)
        ;; (define-key ggtags-mode-map "\et" 'gtags-find-tag)

        ;; need to undefine a couple keys in evil.
        (setq evil-overriding-maps (cons '(gtags-mode-map . nil) evil-overriding-maps))
        (setq evil-overriding-maps (cons '(gtags-select-mode-map . nil) evil-overriding-maps))

        ;;
        ;; Gtags custom functionality
        ;;

        (defun get-newtags-buffer-name ()
          (concat "*newtags-" (get-workspace-root) "-*"))

        (defun get-newtags-proc-name ()
          (concat "newtags-" (get-workspace-root) ""))

        (defun is-newtags-running ()
          (let ((wsroot (get-workspace-root))
                (tag-buffer (get-buffer (get-newtags-buffer-name))))
            (if (not tag-buffer)
                nil
              (save-current-buffer
                (set-buffer tag-buffer)
                (if (eq (process-status tag-process) 'exit)
                    nil
                  t)))))

        (defun run-newtags ()
          (interactive)
          (let ((wsroot (get-workspace-root))
                (tag-buffer (get-buffer (get-newtags-buffer-name))))
            (if (not tag-buffer)
                (save-current-buffer
                  (setq tag-buffer (get-buffer-create (get-newtags-buffer-name)))
                  (setq tag-proc-name nil)
                  (setq tag-process nil)
                  (set-buffer tag-buffer)
                  (make-local-variable 'tag-proc-name)
                  (make-local-variable 'tag-process)
                  (setq tag-proc-name (get-newtags-proc-name))
                  (cd wsroot)
                  (setq tag-process (start-process tag-proc-name tag-buffer "newtags")))
              ;; We have a buffer is the process running?
              (if (is-newtags-running)
                  (save-current-buffer
                    (set-buffer tag-buffer)
                    (let ()
                      (cd wsroot)
                      (setq tag-process (start-process tag-proc-name tag-buffer "newtags"))))
                (process-status tag-process)))))

        (defun get-gtags-dir ()
          (interactive)
          (let ((path (shell-command-to-string "global -pr")))
            (if (eq (elt path 0) ?/)
                (substring path 0 -1)
              nil)))

        (defun gtags-update (&optional iactive)
          (interactive (list t))
          (if (and iactive
                   gtags-mode
                   (not (is-newtags-running)))
              (save-excursion
                (if (not (get-gtags-dir))
                    (if (y-or-n-p "No GTAGS file run newtags? ")
                        (run-newtags))
                  (let ((file-path (expand-file-name buffer-file-name))
                        (gpath (expand-file-name (get-gtags-dir))))
                    (setq file-path
                          (subseq file-path (1+ (length gpath)) (length file-path)))
                    (cd gpath)
                    ;; (shell-command-to-string (concat
                    (shell-command-to-string (concat "gtags --single-update=" file-path)))))))

        ;;
        ;; Run gtags update on save -- XXX this can take a long time actually
        ;;
                                            ;(add-hook 'after-save-hook 'gtags-update)


    ))
  #+end_src
** Mail
#+begin_src emacs-lisp
  (setq mail-from-style 'angles)
  (setq mail-archive-file-name (expand-file-name "~/Personal/Mail/mail-archive"))
#+end_src

** Screen/TMUX
#+begin_src emacs-lisp
  (defun sigusr1-handler ()
    (interactive)
    (message "Caught signel %S" last-input-event)
    (let ((lines (split-string (shell-command-to-string "tmux show-environment") "\n" t)))
      (while lines
        (let ((tup (split-string (car lines) "=" t)))
          (if (not (string/starts-with (car tup) "-"))
              (progn
                (setenv (car tup) (cadr tup))
                (message "Updating %s with %s" (car tup) (cadr tup))))
          (setq lines (cdr lines))))))

  (let ((tmux (getenv "TMUX"))
        (sty (getenv "STY")))
    (message "Got sty of %s" sty)
    (if sty
        (progn
          (message "Enabling gnu-screen signal handling")
          (defun sigusr1-handler ()
            (interactive)
            (message "Caught signel %S" last-input-event)
            (let ((spid (car (split-string (getenv "STY") "\\."))))
              (message "Got spid %s" spid)
              (if (file-exists-p (concat "/tmp/screen." spid ".vars"))
                  (let ((newlines (read-lines (concat "/tmp/screen." spid ".vars"))))
                    (while newlines
                      (let ((tup (split-string (substring (car newlines) 7) "=")))
                        (setenv (car tup) (substring (cadr tup) 1 -1))
                        (message "Updating %s with %s" (car tup)  (substring (cadr tup) 1 -1)))
                      (setq newlines (cdr newlines))))
                (message "File %s doesn't exist" (concat "/tmp/screen." spid ".vars")))))
          (define-key special-event-map [sigusr1] 'sigusr1-handler)))
    (if tmux
        (progn
          (message "Enabling TMUX signal handling")
          (define-key special-event-map [sigusr1] 'sigusr1-handler))))
#+end_src

** Flymake (disabled)
#+begin_src emacs-lisp :tangle no
  (defvar chopps-flymake-minor-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "M-p") 'flymake-goto-prev-error)
      (define-key map (kbd "M-n") 'flymake-goto-next-error)
      map)
    "Keymap for my flymake minor mode")
#+end_src

** Programming

*** Projects
#+begin_src emacs-lisp
  (req-package projectile
    :interpreter ("projectile" . projectile-mode))
#+end_src

*** CC Mode
#+begin_src emacs-lisp
  (req-package cc-mode
    :require projectile
    :config
    (progn
      (modify-syntax-entry ?_ "w" c-mode-syntax-table)
      (modify-syntax-entry ?_ "w" c++-mode-syntax-table)

      (add-hook 'c-mode-hook
                (function (lambda ()
                            (c-set-style "Procket")
                            (c-toggle-auto-hungry-state 1)
                            (setq fill-column 80)
                            (turn-on-auto-fill)
                            (flyspell-prog-mode)
                            (setq indent-tabs-mode nil)
                            (projectile-mode t)
                            )))

      (c-add-style
       "KNF"
       '((c-basic-offset . 8)
         (c-comment-only-line-offset . 0)
         (c-label-minimum-indentation . 0)
         (c-tab-always-indent    . t)
         (c-hanging-semi&comma-criteria (lambda () 'stop))
         (c-hanging-braces-alist . ((class-open) (class-close) (defun-open)
                                    (defun-close) (inline-open) (inline-close)
                                    (brace-list-open) (brace-list-close)
                                    (brace-list-intro) (brace-list-entry)
                                    (block-open) (block-close) (substatement-open)
                                    (statement-case-open) (extern-lang-open)
                                    (extern-lang-close)))
         (c-hanging-colons-alist     . ((access-label)
                                        (case-label)
                                        (label)
                                        (member-init-intro)
                                        (inher-intro)))
                                          ;   (c-cleanup-list             . (scope-operator
                                          ;                                 empty-defun-braces
                                          ;                                 defun-close-semi))
         (c-offsets-alist . ((string                . -1000)
                             (c                     . c-lineup-C-comments)
                             (defun-open            . 0)
                             (defun-close           . 0)
                             (defun-block-intro     . +)
                             (func-decl-cont        . 0)
                                          ; above is ansi        (func-decl-cont        . 0)
                             (knr-argdecl-intro     . 0)
                             (knr-argdecl           . 0)
                             (topmost-intro         . 0)
                             (topmost-intro-cont    . 0)
                             (block-open            . 0)
                             (block-close           . 0)
                             (brace-list-open       . 0)
                             (brace-list-close      . 0)
                             (brace-list-intro      . +)
                             (brace-list-entry      . 0)
                             (statement             . 0)
                             (statement-cont        . 4)
                             (statement-block-intro . +)
                             (statement-case-intro  . +)
                             (statement-case-open   . 0)
                             (substatement          . +)
                             (substatement-open     . 0)
                             (case-label            . 0)
                             (label                 . -)
                             (do-while-closure      . 0)
                             (else-clause           . 0)
                             (comment-intro         . c-lineup-comment)
                             (arglist-intro         . 4)
                             (arglist-cont          . 0)
                             (arglist-cont-nonempty . 4)
                             (arglist-close         . 4)
                             (cpp-macro             . -1000)
                             ))))

      (c-add-style
       "Procket"
       '((c-basic-offset . 4)
         (c-comment-only-line-offset . 0)
         (c-label-minimum-indentation . 0)
         (c-tab-always-indent    . t)
         (c-hanging-semi&comma-criteria (lambda () 'stop))
         (c-hanging-braces-alist . ((class-open) (class-close) (defun-open)
                                    (defun-close) (inline-open) (inline-close)
                                    (brace-list-open) (brace-list-close)
                                    (brace-list-intro) (brace-list-entry)
                                    (block-open) (block-close) (substatement-open)
                                    (statement-case-open) (extern-lang-open)
                                    (extern-lang-close)))
         (c-hanging-colons-alist     . ((access-label)
                                        (case-label)
                                        (label)
                                        (member-init-intro)
                                        (inher-intro)))
                                          ;   (c-cleanup-list             . (scope-operator
                                          ;                                 empty-defun-braces
                                          ;                                 defun-close-semi))
         (c-offsets-alist . ((string                . -1000)
                             (c                     . c-lineup-C-comments)
                             (defun-open            . 0)
                             (defun-close           . 0)
                             (defun-block-intro     . +)
                             (func-decl-cont        . 0)
                                          ; above is ansi        (func-decl-cont        . 0)
                             (knr-argdecl-intro     . 0)
                             (knr-argdecl           . 0)
                             (topmost-intro         . 0)
                             (topmost-intro-cont    . 0)
                             (block-open            . 0)
                             (block-close           . 0)
                             (brace-list-open       . 0)
                             (brace-list-close      . 0)
                             (brace-list-intro      . +)
                             (brace-list-entry      . 0)
                             (statement             . 0)
                             (statement-cont        . c-lineup-math)
                             (statement-block-intro . +)
                             (statement-case-intro  . +)
                             (statement-case-open   . 0)
                             (substatement          . +)
                             (substatement-open     . 0)
                             (case-label            . 0)
                             (label                 . -)
                             (do-while-closure      . 0)
                             (else-clause           . 0)
                             (comment-intro         . c-lineup-comment)
                             (arglist-intro         . 4)
                             (arglist-cont          . 0)
                             (arglist-cont-nonempty . c-lineup-arglist)
                             (arglist-close         . 4)
                             (cpp-macro             . -1000)
                             ))))
      ;; (require 'enable-completion)
      ;; (require 'enable-acme)

      ;; (defun find-root-and-create-project ()
      ;;   (interactive)
      ;;   (let ((wsroot (get-workspace-root))
      ;;         (sysinc '())
      ;;         (inc '())
      ;;         wsels
      ;;         )
      ;;     (if (string-equal "/" wsroot)
      ;;         nil
      ;;       (setq wsels (split-string wsroot "/"))
      ;;       (setq pname (car (last wsels 2)))
      ;;       ; Would be better to grab all the directories under wsroot/inc
      ;;       (ede-cpp-root-project (concat pname "-ede")
      ;;                             :file (concat wsroot "Jamfile")
      ;;                             :system-include-path (list (concat wsroot "/nobackup/chopps/s/inc/x86l32/global/iosxr-os/os/"))
      ;;                             :include-path (list (concat wsroot "/nobackup/chopps/s/inc/x86l32/global/iosxr-os/"))))))
      ))
#+end_src
*** Perl
#+begin_src emacs-lisp
  (req-package perl-mode
    :mode ("\\.pl\\'" . perl-mode)
    :interpreter ("perl" . perl-mode))
#+end_src

*** Python
#+begin_src emacs-lisp
  (req-package pylookup
    :commands (pylookup-lookup pylookup-update)
    :init
    (progn
      (setq pylookup-dir (concat user-emacs-directory "el-get/pylookup/"))
      (setq pylookup-program (concat pylookup-dir "/pylookup.py"))
      (setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))
      ))

  (req-package python
    :require (elpy jedi flymake-pyfixers nose s)
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :init
    (progn
      (defun my-python-mode-hook ()
        ;; (setq jedi:server-args '("--log-traceback"))
        (jedi:setup)
        ;; Fill values
        (setq comment-column 60)
        (setq fill-column 120)
        (turn-on-auto-fill)
        ;; Rebox
        (set (make-local-variable 'rebox-style-loop) '(74 75 76 11))
        (highlight-indentation-mode -1)
        (define-key python-mode-map (kbd "C-c M-\\") 'pyfixer:ignore-current-line)
        (define-key python-mode-map (kbd "C-c C-\\") 'pyfixer:fix-current-line)
        (define-key python-mode-map (kbd "C-c C-M-\\") 'pyfixer:fix-all-errors)
        (define-key python-mode-map (kbd "C-c 8") 'pyfixer:fix-all-errors)
        (define-key python-mode-map (kbd "C-c h") 'pylookup-lookup)

        (flyspell-prog-mode)
        (projectile-mode t)
        (flycheck-mode t)
        (rebox-mode 1)
        (ggtags-mode 1)
        ;; What is this?
        ;; (node-mode)
        ;; Why is this needed?
        ;; (elpy-mode t)
        (jedi-mode 1)
        )

      (when (not (setq python-check-command (locate-file "pycheckers.sh" (list user-emacs-directory))))
        (setq python-check-command "flake8"))

      ;; Elpy Init
      ;; (setq elpy-rpc-backend "jedi")
      (message "Doing elpy-enable")
      (elpy-enable))

    :config
    (progn
      (message "Initializing python mode settings")


      (setq nose-project-root-files '("setup.py" ".hg" ".git" ".svn"))

      ;; Elpy config
      (define-key elpy-mode-map (kbd "C-c C-n") 'next-error)
      (define-key elpy-mode-map (kbd "C-c C-p") 'previous-error)
      (elpy-use-ipython)
      ;; (elpy-clean-modeline)

      ;; Python config
      (add-hook 'python-mode-hook 'my-python-mode-hook)

      ;; Consider _ a part of words for python
      (modify-syntax-entry ?_ "w" python-mode-syntax-table)

      (setq
       python-shell-interpreter "ipython"
       python-shell-interpreter-args ""
       python-shell-prompt-regexp "In \\[[0-9]+\\]: "
       python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
       python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
       python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
       python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

      ;; (define-key global-map (kbd "C-c o") 'iedit-mode)

      (if (file-exists-p "/home/chopps/sw/xrut-cel-5/bin/python")
          (setenv "PYMACS_PYTHON" "/home/chopps/sw/xrut-cel-5/bin/python")
        (if (file-exists-p "/auto/xrut/sw/xrut-cel-5/bin/python")
            (setenv "PYMACS_PYTHON" "/auto/xrut/sw/xrut-cel-5/bin/python")
          (if (file-exists-p "/Users/chopps/venv/bin/python"  )
              (setenv "PYMACS_PYTHON" "/Users/chopps/venv/bin/python")
            (if (file-exists-p "/usr/local/bin/python"  )
                (setenv "PYMACS_PYTHON" "/usr/local/bin/python")))))

      (defun python-sort-import-list ()
        "Split an single import lines with multiple module imports into separate lines sort results"
        (interactive)
        (if (not (use-region-p))
            (error "No region defined"))
        (let* ((start (region-beginning))
               (end (region-end))
               (value 0)
               found)
          (save-excursion
            (let* (modlist impstart impend bigstr)
              (setq modlist '())
              (goto-char start)
              (when (re-search-forward "^import \\([[:alnum:]_,\\. ]+\\)$" end t)
                (setq impstart (match-beginning 0))
                (setq impend (match-end 0))
                (setq modlist (append modlist (mapcar 's-trim (s-split "," (match-string 1)))))
                (while (setq found (re-search-forward "^import \\([[:alnum:]_,\\. ]+\\)$" end t))
                  (setq impend (match-end 0))
                  (setq modlist (append modlist (mapcar 's-trim (s-split "," (match-string 1))))))
                (setq modlist (sort modlist 's-less?))
                (setq modlist (mapcar (lambda (x) (concat "import " x)) modlist))
                (setq bigstr (s-join "\n" modlist))
                (save-restriction
                  (narrow-to-region impstart impend)
                  (delete-region impstart impend)
                  (goto-char impstart)
                  (insert bigstr)))))))
      ))
#+end_src
*** Pymacs
   #+begin_src emacs-lisp
     (req-package pymacs
       :commands (pymacs-apply pymacs-call pymacs-eval pymacs-exec pymacs-load)
       :config
       (progn
         (message "pymacs loaded")
         (add-to-list 'pymacs-load-path (concat user-emacs-directory "pymacs-dir"))

         (defun fp-maybe-pymacs-reload ()
           (let ((buffer-directory (file-name-directory buffer-file-name)))
             (dolist (pymacsdir pymacs-load-path)
               (setq pymacsdir (expand-file-name pymacsdir))
               (when (and (string-equal (file-name-directory buffer-file-name)
                                        pymacsdir)
                          (string-match-p "\\.py\\'" buffer-file-name))
                 (pymacs-load (substring buffer-file-name 0 -3))))))
         (add-hook 'after-save-hook 'fp-maybe-pymacs-reload)

         ;; Rope emacs slows saves down incredibly so don't use it
         (setq ropemacs-guess-project t)
         (setq ropemacs-enable-autoimport t)

          ;; (if athome
          ;;     (progn
          ;;       (add-hook 'before-save-hook
          ;;                 (function (lambda ()
          ;;                                    ; get time and print message
          ;;                             (message (concat "exit before-save-hook"
          ;;                                              (current-time-string))))))
          ;;       (add-hook 'after-save-hook
          ;;                 (function (lambda ()
          ;;                                    ; get time and print message
          ;;                             (message (concat "exit after-save-hook"
          ;;                                              (current-time-string))))))
          ;;       ;;(pymacs-load "ropemacs" "rope-")
          ;;       )

          ;;   (add-hook 'before-save-hook
          ;;             (function (lambda ()
          ;;                                    ; get time and print message
          ;;                         (message (concat "enter before-save-hook"
          ;;                                          (current-time-string))))))
          ;;   (add-hook 'after-save-hook
          ;;             (function (lambda ()
          ;;                                    ; get time and print message
          ;;                         (message (concat "enter after-save-hook"
          ;;                                          (current-time-string))))))
          ;;   ;;(pymacs-load "ropemacs" "rope-")
          ;;  )
          ))
   #+end_src

** Task Juggler
#+begin_src emacs-lisp
  (req-package taskjuggler-mode
    :mode "\\.tjp\\'")
#+end_src

** Org-Mode
#+begin_src emacs-lisp
  (req-package org
    :ensure org-plus-contrib
    :require (org-mac-link org-magit) ;; ox-taskjuggler
    :interpreter ("org" . org-mode)
    :mode ("\\.org\\'" . org-mode)
    :bind ("C-c c" . org-capture)
    :init
    (progn
      (defun my-org-mode-hook ()
        (message "Org-mode-hook")
        (org-set-local 'yas/trigger-key [tab])
        (yas-minor-mode)
        (turn-on-flyspell)
        (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)
        (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)
        ;; (and (buffer-file-name)
        ;;      (string-match "\\.o2b$" (buffer-file-name))
        ;;      (org2blog/wp-mode)))
        )
      (define-key global-map (kbd "C-c a") 'org-agenda)
      (define-key global-map (kbd "C-c c") 'org-capture)
      (define-key global-map (kbd "C-c l") 'org-store-link)
      (add-hook 'org-mode-hook 'my-org-mode-hook)
      ;; (require 'org-latex)

      (setq org-directory "~/org-mode")
      (setq org-src-fontify-natively t)
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      )
    :config
    (progn
      (message "org-mode after load")
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t) (dot . t))
       )

      ;; (add-to-list 'org-modules 'org-mac-message)
      ;; (setq org-mac-mail-account "Work")

      ;; - Vi friendly bindings replacing cursor movement with meta-{hjkl}
      (bind-key "M-h" 'org-metaleft org-mode-map)
      (bind-key "M-l" 'org-metaright org-mode-map)
      (bind-key "M-k" 'org-metaup org-mode-map)
      (bind-key "M-j" 'org-metadown org-mode-map)
      (bind-key "M-H" 'org-shiftmetaleft org-mode-map)
      (bind-key "M-L" 'org-shiftmetaright org-mode-map)
      (bind-key "M-K" 'org-shiftmetaup org-mode-map)
      (bind-key "M-J" 'org-shiftmetadown org-mode-map)

      (setq org-capture-templates
            '(("t" "Todo" entry (file+headline (concat org-directory "/notes.org") "Tasks")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)

              ("m" "Mail Todo" entry (file+headline (concat org-directory "/notes.org") "Mail")
               "* TODO %?\n%U\n%(org-mac-message-get-links \"s\")\n")

              ("l" "Link Note" entry (file+headline (concat org-directory "/notes.org") "Notes")
               "* NOTE %?\n%U\n%(org-mac-safari-get-frontmost-url)\n")

              ("n" "Note" entry (file+datetree (concat org-directory "/notes.org") "Notes")
               "* NOTE %?\na:%a\nx:%x\n" :clock-in t :clock-keep t)

              ("s" "Status" entry (file+datetree (concat org-directory "/status.org"))
               "* TODO %?\na:%a\nx:%x\n" :clock-in t :clock-keep t)

              ("x" "XRUT related")
              ("xm" "XRUT Todo with Mail" entry (file+headline (concat org-directory "/notes.org") "XRUT")
               "* TODO %?\n%U\n%(org-mac-message-get-links \"s\")\n")

              ("xt" "XRUT Todo" entry (file+headline (concat org-directory "/notes.org") "XRUT")
               "* TODO %?\n%U\n%a\n")
              )
            )
      )
    )
#+end_src

** Blogging
#+begin_src emacs-lisp
  (req-package org2blog
    :require (metaweblog netrc)
    :interpreter ("org2blog" . org2blog/wp-mode)
    :mode ("\\.o2b\\'" . org2blog/wp-mode)
    :init
    (progn
      (setq blog (netrc-machine (netrc-parse "~/.netrc") "hoppsjots.org" t))
      (setq org2blog/wp-use-sourcecode-shortcode t)
      (setq org2blog/wp-blog-alist
            '(("wordpress"
               :url "http://chopps.wordpress.com/xmlrpc.php"
               :username "chopps"
               :default-title "Hello World"
               :default-categories ("org2blog" "emacs")
               :tags-as-categories nil)
              ("hoppsjots.org"
               :url "http://hoppsjots.org/xmlrpc.php"
               :default-categories ("Development" "Emacs")
               :username (netrc-get blog "login")
               :password (netrc-get blog "password"))))
      )
    :config
    (progn
      (defadvice org-wp-src-block (after ad-org-wp-src-block activate)
        "Always use space as title if none given"
        (setq ad-return-value (replace-regexp-in-string "title=\"\"" "title=\" \"" ad-return-value)))
      (ad-activate 'org-wp-src-block)
      (add-to-list 'org2blog/wp-sourcecode-langs "lisp")
      (add-to-list 'org2blog/wp-sourcecode-langs "sh")
      ))
#+end_src

** Spelling
#+begin_src emacs-lisp
  (define-key ctl-x-map (kbd "C-i") 'endless/ispell-word-then-abbrev)

  (defun endless/ispell-word-then-abbrev (p)
    "Call `ispell-word'. Then create an abbrev for the correction made. With prefix P, create local abbrev. Otherwise it will be global."
    (interactive "P")
    (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
      (call-interactively 'ispell-word)
      (setq aft (downcase (or (thing-at-point 'word) "")))
      (unless (string= aft bef)
        (message "\"%s\" now expands to \"%s\" %sally"
                 bef aft (if p "loc" "glob"))
        (define-abbrev
          (if p global-abbrev-table local-abbrev-table)
          bef aft))))

  (setq save-abbrevs t)
  (setq-default abbrev-mode t)

  (setq flyspell-issue-message-flag nil)
#+end_src

** Completion

*** Auto Complete
  #+begin_src emacs-lisp
    (if (boundp 'viper-harness-minor-mode)
        (progn
          (viper-harness-minor-mode "auto-complete")
          ;; XX (viper-harness-minor-mode "auto-complete-extension")
          (viper-harness-minor-mode "auto-complete-config")))

    (require 'auto-complete-config)

    ; XXX (require 'auto-complete-extension)
    (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
    (ac-config-default)

    (defun ac-python-mode-setup ()
      (setq ac-sources (append '(ac-source-yasnippet ac-source-gtags) ac-sources)))
    (add-hook 'python-mode-hook 'ac-python-mode-setup)


    (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)

    (setq ac-auto-start nil)        ; don't run ac-complete continuously
    (setq ac-trigger-key "TAB")     ; do start auto-complete when a tab is encountered
    (setq ac-trigger-commands '(chopps-python-tab)) ; when entered enables completion
    (define-key ac-menu-map "\C-n" 'ac-next)
    (define-key ac-menu-map "\C-p" 'ac-previous)
    (define-key ac-menu-map "\e" 'ac-complete)


    (setq ac-trigger-commands-on-completing
          (cons 'viper-intercept-ESC-key ac-trigger-commands-on-completing))

  #+end_src

*** File and Buffer Completion (ido)
;;----------------------------+
;; File and buffer completion
;;----------------------------+

#+begin_src emacs-lisp
  ;; ido mode
  (ido-mode +1)
  ;; ido almost everywhere
  (ido-ubiquitous-mode +1)
  ;; smarter fuzzy matching for ido
  (flx-ido-mode +1)
  ;; disable ido faces to see flx highlights
  (setq ido-use-faces nil)

  ;; remember recently and most frequently used commands
  ;; (setq-smex-save-fil (expand-file-name ".smex-items"))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+end_src

*** Helm mode
Taken from: http://tuhdo.github.io/helm-intro.html

#+begin_src emacs-lisp

  (if nil
      (progn
        (require 'helm)
        (require 'helm-config)
        (require 'helm-files)
        (require 'helm-grep)

        (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
        (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
        (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

        (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
        (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
        (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

        (setq
         helm-google-suggest-use-curl-p t
         helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
         helm-quick-update t ; do not display invisible candidates
         helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
         helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
         helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.

         ;; you can customize helm-do-grep to execute ack-grep
         ;; helm-grep-default-command "ack-grep -Hn --smart-case --no-group --no-color
         ;; %e %p %f"
         ;; helm-grep-default-recurse-command "ack-grep -H --smart-case --no-group
         ;; --no-color %e %p %f"
         helm-split-window-default-side 'other ;; open helm buffer in another window
         helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
         helm-buffers-favorite-modes (append helm-buffers-favorite-modes
                                             '(picture-mode artist-mode))
         helm-candidate-number-limit 200 ; limit the number of displayed canidates
         helm-M-x-requires-pattern 0     ; show all candidates when set to 0
         helm-boring-file-regexp-list
         '("\\.pyc$" "\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$") ; do not show these files in helm buffer
         helm-ff-file-name-history-use-recentf t
         helm-move-to-line-cycle-in-source t ; move to end or beginning of source
                                          ; when reaching top or bottom of source.
         ido-use-virtual-buffers t      ; Needed in helm-buffers-list
         helm-buffers-fuzzy-matching t          ; fuzzy matching buffer names when
         non--nil
                                          ; useful in helm-mini that lists buffers
         )


        (define-key helm-map (kbd "C-x 2") 'helm-select-2nd-action)
        (define-key helm-map (kbd "C-x 3") 'helm-select-3rd-action)
        (define-key helm-map (kbd "C-x 4") 'helm-select-4rd-action)

        (global-set-key (kbd "M-x") 'helm-M-x)
        (global-set-key (kbd "M-y") 'helm-show-kill-ring)
        (global-set-key (kbd "C-x b") 'helm-mini)
        (global-set-key (kbd "C-x C-f") 'helm-find-files)
        (global-set-key (kbd "C-c h m") 'helm-man-woman)
        (global-set-key (kbd "C-c h g") 'helm-do-grep)
        (global-set-key (kbd "C-c h f") 'helm-find)
        (global-set-key (kbd "C-c h l") 'helm-locate)
        (global-set-key (kbd "C-c h o") 'helm-occur)
        (global-set-key (kbd "C-c h r") 'helm-resume)
        (global-set-key (kbd "C-h C-f") 'helm-apropos)

        (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

        (helm-mode +1)
        ))
#+end_src

*** Yasnippet

  #+begin_src emacs-lisp
    (req-package yasnippet
      :init
      (progn
        (message "yasnippet loading")
        ;; (setq yas/trigger-key (kbd "C-c <kp-multiply>"))
        ;; (setq yas/trigger-key (kbd "C-c C-q"))
        (setq yas/trigger-key (kbd "C-c C-]"))
        ;;     ;(setq yas/root-directory "~/.emacs.d/snippets")
        ;;     (setq yas/snippet-dirs '("~/.emacs.d/snippets"))
        ;;     ;(yas/initialize)
        ;;     ;(yas/load-directory yas/root-directory)

        ;; Don't map TAB to yasnippet
        ;; In fact, set it to something we'll never use because
        ;; we'll only ever trigger it indirectly.

        (add-hook 'yas/after-exit-snippet-hook
                  (lambda () (setq ac-trigger-key nil)))
        (add-hook 'yas/before-expand-snippet-hook
                  (lambda () (setq ac-trigger-key "TAB")))
        (message "yasnippet loaded"))
      :config
      (yas-reload-all))
    ;;     (yas/global-mode 1)))
  #+end_src

*** Headers
  #+begin_src emacs-lisp
    (defun user-full-name ()
      "Christian Hopps")

    (defun my-get-date ()
      (concat (format-time-string "%B" (current-time))
              " "
              (trim-string (format-time-string " %e" (current-time)))
              (format-time-string " %Y" (current-time))))

    (eval-after-load 'autoinsert
      '(progn

         ;;-----------+
         ;;      Home
         ;;-----------+

         (define-auto-insert
           '("\\.org" . "Home Org mode skeleton")
           '("Short description: "
             "#+TITLE: " _ \n
             > "#+AUTHOR: Christian E. Hopps" \n
             > "#+EMAIL: chopps@gmail.com" \n
             > "#+STARTUP: indent" \n
             > "" \n
             ))
         (define-auto-insert
           '("\\.o2b" . "Home Blog Org mode skeleton")
           '("Short description: "
             "#+TITLE: " _ \n
             > "#+BLOG: hoppsjots.org" \n
             > "#+AUTHOR: Christian E. Hopps" \n
             > "#+EMAIL: chopps@gmail.com" \n
             > "#+CATEGORY: Development" _ \n
             > "#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil" \n
             > "#+STARTUP: indent" \n
             > "" \n
             ))
         (define-auto-insert
           '("\\.el" . "Home Lisp comment skeleton")
           '("Short description: "
             ";;" \n
             > ";; " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
             > ";;" \n
             > ";; Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps" \n
             > ";; All rights reserved." \n
             > ";;" \n
             > _ ))
         (define-auto-insert
           '("\\.py" . "# Home python comment skeleton")
           '("Short description: "
             "#" \n
             > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
             > "#" \n
             > "# Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
             > "# All rights reserved." \n
             > "from __future__ import absolute_import, division, unicode_literals, print_function, nested_scopes" \n
             > "import sys, os" \n
             > "sys.path[0:0] = [ os.path.dirname(sys.path[0]) + '/modules'," \n
             > "                  '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC' ]" \n
             > "" \n
             > "" \n
             > "" \n
             > "__author__ = '" (user-full-name) "'" \n
             > "__date__ = '" (my-get-date) "'" \n
             > "__version__ = '1.0'" \n
             > "__docformat__ = \"restructuredtext en\"" \n
             > _ ))
         (define-auto-insert
           '("\\.\\(pl\\|sh\\|tcl\\)" . "# Home comment skeleton")
           '("Short description: "
             "#" \n
             > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
             > "#" \n
             > "# Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
             > "# All rights reserved." \n
             > "#" \n
             > _ ))
         (define-auto-insert
           '("\\.rst" . "Home ReST skeleton")
           '("Short description: "
             ".." \n
             > ".. " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
             > ".." \n
             > ".. Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
             > ".. All rights reserved." \n
             > ".." \n
             > _ ))
         (define-auto-insert
           '("\\.\\(h\\|c\\|CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "Home C-style skeleton")
           '("Short description: "
             "/*" \n
             > "* " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
             > "*" \n
             > "* Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
             > "* All rights reserved." \n
             > "*/" \n
             > _ ))

         ;;-----------+
         ;;      Work
         ;;-----------+

         (define-auto-insert
           '("\\(/users/chopps/\\|/nobackup/\\|//ws/chopps-\\|/xrut\\).*\\.org" . "Work org mode skeleton")
           '("Short description: "
             "#+TITLE: " _ \n
             > "#+AUTHOR: Christian E. Hopps" \n
             > "#+EMAIL: chopps@cisco.com" \n
             > "#+STARTUP: indent" \n
             > "" \n
             ))
         (define-auto-insert
           '("\\(/users/chopps/\\|/nobackup/\\|//ws/chopps-\\|/xrut\\).*\\.el" . "Work Lisp comment skeleton")
           '("Short description: "
             ";;" \n
             > ";; " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@gmail.com>" \n
             > ";;" \n
             > ";; Copyright (c) " (substring (current-time-string) -4) " by Christian E. Hopps." \n
             > ";; All rights reserved." \n
             > ";;" \n
             > _ )
           )
         (define-auto-insert
           '("\\(/users/chopps/\\|/nobackup/\\|//ws/chopps-\\|/xrut\\).*\\.py" . "# Work python comment skeleton")
           '("Short description: "
             "#" \n
             > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@cisco.com>" \n
             > "#" \n
             > "# Copyright (c) " (substring (current-time-string) -4) " by cisco Systems, Inc." \n
             > "# All rights reserved." \n
             > "#" \n
             > "from __future__ import absolute_import, division, unicode_literals, print_function, nested_scopes" \n
             > "import sys, os" \n
             > "sys.path[0:0] = [ os.path.dirname(sys.path[0]) + '/modules', ]" \n
             "" \n
             "" \n
             "" \n
             > "__author__ = '" (user-full-name) "'" \n
             > "__date__ = '" (my-get-date) "'" \n
             > "__version__ = '1.0'" \n
             > "__docformat__ = \"restructuredtext en\"" \n
             > _ ))
         (define-auto-insert
           '("\\(/users/chopps/\\|/nobackup/\\|//ws/chopps-\\|/xrut\\).*\\.\\(pl\\|sh\\|tcl\\)" . "# Work comment skeleton")
           '("Short description: "
             "#" \n
             > "# " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@cisco.com>" \n
             > "#" \n
             > "# Copyright (c) " (substring (current-time-string) -4) " by cisco Systems, Inc." \n
             > "# All rights reserved." \n
             > "#" \n
             > _ ))
         (define-auto-insert
           '("\\(/users/chopps/\\|/nobackup/\\|//ws/chopps-\\|/xrut\\).*\\.rst" . "Work ReST skeleton")
           '("Short description: "
             ".." \n
             > ".. " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@cisco.com>" \n
             > ".." \n
             > ".. Copyright (c) " (substring (current-time-string) -4) " by cisco Systems, Inc." \n
             > ".. All rights reserved." \n
             > ".." \n
             > _ ))
         (define-auto-insert
           '("\\(/users/chopps/\\|/nobackup/\\|//ws/chopps-\\|/xrut\\).*\\.\\(h\\|c\\|CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "Work C-style skeleton")
           '("Short description: "
             "/*" \n
             > "* " (my-get-date) ", " (user-full-name) " <" (user-login-name) "@cisco.com>" \n
             > "*" \n
             > "* Copyright (c) " (substring (current-time-string) -4) " by cisco Systems, Inc." \n
             > "* All rights reserved." \n
             > "*/" \n
             > _ ))

           ))

    (auto-insert-mode)
  #+end_src
** Keys

  #+begin_src emacs-lisp
    ;;(setq vc-default-back-end 'ACMEC)
    (define-key global-map "\C-xv-" 'ediff-revision)

            ;;; C-x C-k - quit.
    (define-key global-map "\C-x\C-k" 'save-buffers-kill-emacs)

            ;;; C-x C-j - goto line
    (define-key global-map "\C-x\C-j" 'goto-line)

            ;;; C-x C-m - newline
    (define-key global-map "\C-x\C-m" 'newline)

            ;;; C-m (RET) newline and indent
    (define-key global-map "\C-m" 'newline-and-indent)

            ;;; C-x \  what line
    (define-key global-map "\C-x\\" 'what-line)

            ;;; make Backspace be a delete key
                                            ;(global-set-key "\C-h" 'backward-delete-char-untabify)

    (global-set-key (kbd "C-/") 'dabbrev-expand)

    (global-set-key (kbd "M-q") 'rebox-comment)

    (global-set-key (kbd "M-Q") 'fill-paragraph)

    (define-key global-map (kbd "M-W") 'kill-region-to-ssh)

    (define-key global-map (kbd "C-M-h") 'help-command)

    (global-set-key (kbd "A-`") 'other-frame)

    (global-set-key [C-tab] 'other-window-or-frame)

    (global-set-key (kbd "C-\\") 'other-window-or-frame)

    ;; Find emacs source
    (global-set-key (kbd "C-h C-l") 'find-library)
    (global-set-key (kbd "C-h C-f") 'find-function)
    (global-set-key (kbd "C-h C-k") 'find-function-on-key)
    (global-set-key (kbd "C-h C-v") 'find-variable)

    ;; Font size changing
    (global-set-key (kbd "A-+") 'text-scale-increase)
    (global-set-key (kbd "A-_") 'text-scale-decrease)

    (if (getenv "ITERM")
        (defun viper-translate-all-ESC-keysequences () nil)
      (defun viper-translate-all-ESC-keysequences () t))

    (global-set-key (kbd "C-h C-m") 'discover-my-major)

    (global-set-key (kbd "C-c C-g") 'magit-status)

    ;; Have to remove undo-tree mappings for discover to work
    ;; XXX fix (global-discover-mode 1)

    (setq guide-key/guide-key-sequence '("C-x 4" "C-c r" "C-x p"))
    ;; XXX fix (guide-key-mode 1)

  #+end_src

** Undo
#+begin_src emacs-lisp
  (req-package undo-tree
    :config
    (progn
      (define-key undo-tree-map (kbd "C-x r") nil)))
#+end_src

** Modeline
  #+begin_src emacs-lisp
    (column-number-mode t)
    (setq line-number-mode t)
    ;; (set-face-attribute 'mode-line nil :box nil)

    ;; (defun chopps-after-init ()
    ;;   (setq sml/theme 'respectful)
    ;;   (sml/setup))
    ;; (add-hook 'after-init-hook 'chopps-after-init)
  #+end_src

** Display
  #+begin_src emacs-lisp
    (setq x-mouse-click-focus-ignore-position t)
    (setq mouse-yank-at-point t)
    (display-time-mode)

    ;;
    ;; Font-lock
    ;;
    (setq c-font-lock-extra-types
          (quote
           ("FILE" "\\sw+_st" "\\sw+_t" "Lisp_Object" "\\sw+type" "uint" "ushort" "uchar" "boolean" "active_timer")))

    (add-hook 'c-mode-hook
              (function (lambda ()
                          (font-lock-mode 1))))

    (add-hook 'html-mode-hook
              (function (lambda ()
                          (font-lock-mode 1))))

    (add-hook 'lisp-mode-hook
              (function (lambda ()
                          (font-lock-mode 1))))

    (add-hook 'lisp-interaction-mode-hook
              (function (lambda ()
                          (font-lock-mode 1))))

    (add-hook 'perl-mode-hook
              (function (lambda ()
                          (font-lock-mode 1))))

    (add-hook 'python-mode-hook
              (function (lambda ()
                          (font-lock-mode 1))))
  #+end_src

** XRUT
  #+begin_src emacs-lisp
    ;; XRUT functionality

    ;; The current launched workspace
    (setq xrut-launched-workspace nil)

    ;; The last workspace value
    (setq xrut-last-workspace nil)

    ;; The current launch buffer
    (setq xrut-launch-buffer nil)

    (setq xrut-launch-process nil)

    (setq xrut-last-connect "")

    (setq xrut-connect-history nil)

    (defun xrut-launch-script ()
      "launch the script in the current buffer, prompt for workspace"
      (interactive)
      (let ((script-path (buffer-file-name (current-buffer)))
            dirname
            script-name
            w)
        (if (and xrut-launch-buffer (buffer-live-p xrut-launch-buffer))
            (switch-to-buffer xrut-launch-buffer)
          (setq xrut-launch-buffer nil)
          (setq dirname (read-directory-name "Workspace: " xrut-last-workspace xrut-last-workspace t nil))
          (if (not (is-workspace-root (split-string dirname "/")))
              (error "%s is not a workspace" dirname))
            (setq xrut-last-workspace dirname)
            (setq script-name (file-name-nondirectory script-path))
            (if (not xrut-launch-buffer)
                (setq xrut-launch-buffer (get-buffer-create (concat "*LAUNCH-" script-name "*"))))
            (condition-case nil
                (setq w (split-window))
              (setq w (selected-window)))
            (switch-to-buffer xrut-launch-buffer)
            (setq default-directory xrut-last-workspace)
            (insert (format "Directory: %s\nCommand: %s %s\n" default-directory script-path "--launch"))
            (setq xrut-launch-process (start-process script-name xrut-launch-buffer script-path "--launch"))
            )))

    (defun xrut-connect-to-router ()
      "Connect to a router in the currently launched script"
      (interactive)
      (let (buffer cmd router-name)
        (if (not xrut-last-workspace)
            (progn
              (setq dirname (read-directory-name "Workspace: " xrut-last-workspace xrut-last-workspace t nil))
              (if (not (is-workspace-root (split-string dirname "/")))
                  (error "%s is not a workspace" dirname))
              (setq xrut-last-workspace dirname)))
        (setq router-name (read-from-minibuffer "Router: " xrut-last-connect nil nil 'xrut-connect-history))
        (setq buffer (get-buffer-create (concat "*CONNECT-" router-name "*")))
        (condition-case nil
            (setq w (split-window))
          (setq w (selected-window)))
        (switch-to-buffer buffer)
        (setq default-directory xrut-last-workspace)
        (insert (format "Directory: %s\nCommand: lboot -mc %s -- exec\n" default-directory router-name ))
        (shell buffer)
        (process-send-string buffer (format "lboot -mc %s -- exec" router-name))
        ))
  #+end_src
** Legacy Bottom

  #+begin_src emacs-lisp
    (setq default-major-mode 'text-mode)
    (put 'set-goal-column 'disabled nil)
    (put 'eval-expression 'disabled nil)
    (put 'scroll-left 'disabled nil)

    ;; Don't bug me with yes-no questions

    ;; (setq kill-buffer-query-functions (ref:process-query)
    ;;         (remq 'process-kill-buffer-query-function
    ;;                       kill-buffer-query-functions))

  #+end_src

* End Req-Packages
#+begin_src emacs-lisp
  (req-package-finish)
#+end_src

** Realcolor support (disabled)
This is the top of my legacy init.el file.

#+begin_src emacs-lisp :tangle no
  ;; This code is from trying to get 24-bit color support working it is disabled
  ;; for now.

  ;; (set-frame-parameter nil 'tty-color-mode 16777216)
  ;; (load-library "term/tty-colors")
  (defun disabled_tty-color-values (color &optional frame)
    (let ((oldbuf (current-buffer))
          (colorval (tty-color-standard-values color)))
      (with-current-buffer (get-buffer-create "*dbg*")
        (insert (format "T Frame: %s Color: %s Colorval: %s\n" frame color colorval)))
      colorval))
  (defun disabled_xtty-color-standard-values (color &optional frame)
    (let ((oldbuf (current-buffer))
          (colorval (xw-color-values color frame)))
      (with-current-buffer (get-buffer-create "*dbg*")
        (insert (format "X Frame: %s Color: %s Colorval: %s\n" frame color colorval)))
      colorval))
#+end_src
